// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broadcast.proto

#include "broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_broadcast_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Value_Camera_Type_ItemInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Value_Player_ClosedCaption_ItemInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Value_Player_Status_StatusInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Value_Recorder_ClosedCaption_ItemInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Value_Recorder_Train_In_Out;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value_Camera_Type;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value_Player_ClosedCaption;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value_Player_Status;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_broadcast_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Value_Recorder_ClosedCaption;
}  // namespace protobuf_broadcast_2eproto
namespace GoogleProtoBB {
class Value_Recorder_Train_In_OutDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Recorder_Train_In_Out>
      _instance;
} _Value_Recorder_Train_In_Out_default_instance_;
class Value_Player_Status_StatusInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Player_Status_StatusInfo>
      _instance;
} _Value_Player_Status_StatusInfo_default_instance_;
class Value_Player_StatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Player_Status>
      _instance;
} _Value_Player_Status_default_instance_;
class Value_Camera_Type_ItemInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Camera_Type_ItemInfo>
      _instance;
} _Value_Camera_Type_ItemInfo_default_instance_;
class Value_Camera_TypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Camera_Type>
      _instance;
} _Value_Camera_Type_default_instance_;
class Value_Recorder_ClosedCaption_ItemInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Recorder_ClosedCaption_ItemInfo>
      _instance;
} _Value_Recorder_ClosedCaption_ItemInfo_default_instance_;
class Value_Recorder_ClosedCaptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Recorder_ClosedCaption>
      _instance;
} _Value_Recorder_ClosedCaption_default_instance_;
class Value_Player_ClosedCaption_ItemInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Player_ClosedCaption_ItemInfo>
      _instance;
} _Value_Player_ClosedCaption_ItemInfo_default_instance_;
class Value_Player_ClosedCaptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Value_Player_ClosedCaption>
      _instance;
} _Value_Player_ClosedCaption_default_instance_;
class BroadCastDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BroadCastData>
      _instance;
} _BroadCastData_default_instance_;
}  // namespace GoogleProtoBB
namespace protobuf_broadcast_2eproto {
static void InitDefaultsValue_Recorder_Train_In_Out() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Recorder_Train_In_Out_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Recorder_Train_In_Out();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Recorder_Train_In_Out::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Value_Recorder_Train_In_Out =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValue_Recorder_Train_In_Out}, {}};

static void InitDefaultsValue_Player_Status_StatusInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Player_Status_StatusInfo_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Player_Status_StatusInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Player_Status_StatusInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Value_Player_Status_StatusInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValue_Player_Status_StatusInfo}, {}};

static void InitDefaultsValue_Player_Status() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Player_Status_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Player_Status();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Player_Status::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value_Player_Status =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue_Player_Status}, {
      &protobuf_broadcast_2eproto::scc_info_Value_Player_Status_StatusInfo.base,}};

static void InitDefaultsValue_Camera_Type_ItemInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Camera_Type_ItemInfo_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Camera_Type_ItemInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Camera_Type_ItemInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Value_Camera_Type_ItemInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValue_Camera_Type_ItemInfo}, {}};

static void InitDefaultsValue_Camera_Type() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Camera_Type_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Camera_Type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Camera_Type::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value_Camera_Type =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue_Camera_Type}, {
      &protobuf_broadcast_2eproto::scc_info_Value_Camera_Type_ItemInfo.base,}};

static void InitDefaultsValue_Recorder_ClosedCaption_ItemInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Recorder_ClosedCaption_ItemInfo_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Value_Recorder_ClosedCaption_ItemInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValue_Recorder_ClosedCaption_ItemInfo}, {}};

static void InitDefaultsValue_Recorder_ClosedCaption() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Recorder_ClosedCaption_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Recorder_ClosedCaption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Recorder_ClosedCaption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value_Recorder_ClosedCaption =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue_Recorder_ClosedCaption}, {
      &protobuf_broadcast_2eproto::scc_info_Value_Recorder_ClosedCaption_ItemInfo.base,}};

static void InitDefaultsValue_Player_ClosedCaption_ItemInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Player_ClosedCaption_ItemInfo_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Value_Player_ClosedCaption_ItemInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValue_Player_ClosedCaption_ItemInfo}, {}};

static void InitDefaultsValue_Player_ClosedCaption() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_Value_Player_ClosedCaption_default_instance_;
    new (ptr) ::GoogleProtoBB::Value_Player_ClosedCaption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::Value_Player_ClosedCaption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Value_Player_ClosedCaption =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValue_Player_ClosedCaption}, {
      &protobuf_broadcast_2eproto::scc_info_Value_Player_ClosedCaption_ItemInfo.base,}};

static void InitDefaultsBroadCastData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GoogleProtoBB::_BroadCastData_default_instance_;
    new (ptr) ::GoogleProtoBB::BroadCastData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GoogleProtoBB::BroadCastData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_BroadCastData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsBroadCastData}, {
      &protobuf_broadcast_2eproto::scc_info_Value_Recorder_Train_In_Out.base,
      &protobuf_broadcast_2eproto::scc_info_Value_Player_Status.base,
      &protobuf_broadcast_2eproto::scc_info_Value_Camera_Type.base,
      &protobuf_broadcast_2eproto::scc_info_Value_Recorder_ClosedCaption.base,
      &protobuf_broadcast_2eproto::scc_info_Value_Player_ClosedCaption.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Recorder_Train_In_Out.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Player_Status_StatusInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Player_Status.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Camera_Type_ItemInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Camera_Type.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Recorder_ClosedCaption_ItemInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Recorder_ClosedCaption.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Player_ClosedCaption_ItemInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Value_Player_ClosedCaption.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BroadCastData.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_Train_In_Out, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_Train_In_Out, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_Train_In_Out, trainin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_Train_In_Out, trainout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_Status_StatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_Status_StatusInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_Status_StatusInfo, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_Status, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_Status, statusinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Camera_Type_ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Camera_Type_ItemInfo, camid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Camera_Type_ItemInfo, isnetworking_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Camera_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Camera_Type, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Camera_Type, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo, camid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo, hasclosedcaption_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_ClosedCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_ClosedCaption, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Recorder_ClosedCaption, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo, hasclosedcaption_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_ClosedCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_ClosedCaption, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::Value_Player_ClosedCaption, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::BroadCastData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::BroadCastData, recorder_train_in_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::BroadCastData, player_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::BroadCastData, camera_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::BroadCastData, recorder_closedcaption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GoogleProtoBB::BroadCastData, player_closedcaption_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GoogleProtoBB::Value_Recorder_Train_In_Out)},
  { 8, -1, sizeof(::GoogleProtoBB::Value_Player_Status_StatusInfo)},
  { 15, -1, sizeof(::GoogleProtoBB::Value_Player_Status)},
  { 22, -1, sizeof(::GoogleProtoBB::Value_Camera_Type_ItemInfo)},
  { 29, -1, sizeof(::GoogleProtoBB::Value_Camera_Type)},
  { 36, -1, sizeof(::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo)},
  { 43, -1, sizeof(::GoogleProtoBB::Value_Recorder_ClosedCaption)},
  { 50, -1, sizeof(::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo)},
  { 57, -1, sizeof(::GoogleProtoBB::Value_Player_ClosedCaption)},
  { 64, -1, sizeof(::GoogleProtoBB::BroadCastData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Recorder_Train_In_Out_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Player_Status_StatusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Player_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Camera_Type_ItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Camera_Type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Recorder_ClosedCaption_ItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Recorder_ClosedCaption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Player_ClosedCaption_ItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_Value_Player_ClosedCaption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GoogleProtoBB::_BroadCastData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "broadcast.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017broadcast.proto\022\rGoogleProtoBB\"O\n\033Valu"
      "e_Recorder_Train_In_Out\022\r\n\005count\030\001 \001(\r\022\017"
      "\n\007trainIn\030\002 \003(\004\022\020\n\010trainOut\030\003 \003(\004\"\247\001\n\023Va"
      "lue_Player_Status\022\r\n\005count\030\001 \001(\r\022A\n\nstat"
      "usInfo\030\002 \003(\0132-.GoogleProtoBB.Value_Playe"
      "r_Status.StatusInfo\032>\n\nStatusInfo\022 \n\002id\030"
      "\001 \001(\0162\024.GoogleProtoBB.CnlID\022\016\n\006status\030\002 "
      "\001(\r\"\215\001\n\021Value_Camera_Type\022\r\n\005count\030\001 \001(\r"
      "\0228\n\005items\030\002 \003(\0132).GoogleProtoBB.Value_Ca"
      "mera_Type.ItemInfo\032/\n\010ItemInfo\022\r\n\005camID\030"
      "\001 \001(\r\022\024\n\014isNetworking\030\002 \001(\010\"\247\001\n\034Value_Re"
      "corder_ClosedCaption\022\r\n\005count\030\001 \001(\r\022C\n\005i"
      "tems\030\002 \003(\01324.GoogleProtoBB.Value_Recorde"
      "r_ClosedCaption.ItemInfo\0323\n\010ItemInfo\022\r\n\005"
      "camID\030\001 \001(\r\022\030\n\020hasClosedCaption\030\002 \001(\010\"\246\001"
      "\n\032Value_Player_ClosedCaption\022\r\n\005count\030\001 "
      "\001(\r\022A\n\005items\030\002 \003(\01322.GoogleProtoBB.Value"
      "_Player_ClosedCaption.ItemInfo\0326\n\010ItemIn"
      "fo\022\020\n\010playerid\030\001 \001(\r\022\030\n\020hasClosedCaption"
      "\030\002 \001(\010\"\342\002\n\rBroadCastData\022I\n\025Recorder_Tra"
      "in_In_Out\030\001 \001(\0132*.GoogleProtoBB.Value_Re"
      "corder_Train_In_Out\0229\n\rPlayer_Status\030\002 \001"
      "(\0132\".GoogleProtoBB.Value_Player_Status\0225"
      "\n\013camera_type\030\003 \001(\0132 .GoogleProtoBB.Valu"
      "e_Camera_Type\022K\n\026Recorder_ClosedCaption\030"
      "\004 \001(\0132+.GoogleProtoBB.Value_Recorder_Clo"
      "sedCaption\022G\n\024Player_ClosedCaption\030\005 \001(\013"
      "2).GoogleProtoBB.Value_Player_ClosedCapt"
      "ion*\322\n\n\020BroadcastInfoKey\022\031\n\025Recorder_Tra"
      "in_In_Out\020\000\022\027\n\023CommonTimeReference\020\001\022\021\n\r"
      "Player_Status\020\002\022\020\n\014Player_Group\020\003\022\021\n\rPla"
      "yer_Camera\020\004\022\017\n\013Player_Type\020\005\022\020\n\014Player_"
      "Speed\020\006\022\023\n\017Player_Consigne\020\007\022\017\n\013Player_M"
      "ode\020\010\022\032\n\026Player_Extend_Playlist\020\t\022\017\n\013Cam"
      "era_Type\020\n\022\027\n\023Player_Limit_In_Out\020\013\022\024\n\020P"
      "layer_Loop_Mode\020\014\022\025\n\021Player_Loop_Count\020\r"
      "\022\026\n\022Player_Playlist_ID\020\016\022\036\n\032Player_Playl"
      "ist_Element_ID\020\017\022\014\n\010DVE_Mode\020\020\022\014\n\010DVE_Ty"
      "pe\020\021\022\017\n\013DVE_Channel\020\022\022\013\n\007DVE_Num\020\023\022\013\n\007DV"
      "E_Den\020\024\022\024\n\020DVE_CutThreshold\020\025\022\033\n\027DVE_Cus"
      "tom_Transparency\020\026\022\016\n\nRTD_Status\020\027\022\014\n\010RT"
      "D_Type\020\030\022\020\n\014RTD_Position\020\031\022\016\n\nGFX_Status"
      "\020\032\022\020\n\014GFX_Position\020\033\022\034\n\030GFX_Fade_In_Out_"
      "Duration\020\034\022\023\n\017GFX_Loop_In_Out\020\035\022\022\n\016GFX_L"
      "oop_Count\020\036\022\026\n\022GFX_Preload_Status\020\037\022\037\n\033H"
      "ealthInfo_Storage_Capacity\020 \022\026\n\022HealthIn"
      "fo_Version\020!\022\033\n\027HealthInfo_Mixer_Status\020"
      "\"\022 \n\034HealthInfo_Network_Bandwidth\020#\022\036\n\032H"
      "ealthInfo_GPU_Temperature\020$\022\031\n\025HealthInf"
      "o_AJA_Status\020%\022\031\n\025HealthInfo_HDD_Status\020"
      "&\022\032\n\026HealthInfo_ASIO_Status\020\'\022 \n\034HealthI"
      "nfo_External_TimeCode\020(\022\027\n\023CustomInfoBro"
      "adcast\020)\022\017\n\013BMR_Setting\020*\022\032\n\026VuMeter_Liv"
      "e_Mixer_PGM\020+\022\032\n\026Recorder_Close_Caption\020"
      ",\022\030\n\024Player_Close_Caption\020-\022\024\n\020CustomInf"
      "oNotify\020.\022\030\n\024Player_AudioPresetId\020/\022\016\n\nP"
      "iP_Status\0200\022\034\n\030HealthInfo_Server_Memory\020"
      "1\022#\n\037Cache_ReplayPlayer_HighResVideo\0202\022$"
      "\n Cache_ReplayPlayer_ExternalAudio\0203\022\036\n\032"
      "HealthInfo_ReferenceStatus\0204\022\033\n\027HealthIn"
      "fo_SerialNumber\0205\022\"\n\036HealthInfo_Remainin"
      "gTimePerCam\0206\022\026\n\022Film_Effect_Status\0207\022\t\n"
      "\005Tally\0208*\223\t\n\005CnlID\022\020\n\014ID_Replay1_0\020\000\022\021\n\r"
      "ID_Replay1_15\020\017\022\021\n\rID_Replay1_31\020\037\022\027\n\023ID"
      "_Replay1_PGMDirty\020 \022\027\n\023ID_Replay1_PGMCle"
      "an\020!\022\025\n\021ID_Replay1_Import\020\"\022\020\n\014ID_Replay"
      "2_0\0202\022\021\n\rID_Replay2_15\020A\022\021\n\rID_Replay2_3"
      "1\020Q\022\027\n\023ID_Replay2_PGMDirty\020R\022\027\n\023ID_Repla"
      "y2_PGMClean\020S\022\025\n\021ID_Replay2_Import\020T\022\013\n\007"
      "ID_PGM1\020d\022\013\n\007ID_PRV1\020e\022\014\n\010ID_PGM1v\020f\022\013\n\007"
      "ID_PGM2\020g\022\014\n\010ID_PGM2v\020h\022\013\n\007ID_PRV2\020i\022\013\n\007"
      "ID_PGM3\020j\022\014\n\010ID_PGM3v\020k\022\013\n\007ID_PRV3\020l\022\013\n\007"
      "ID_PGM4\020m\022\014\n\010ID_PGM4v\020n\022\013\n\007ID_PRV4\020o\022\013\n\007"
      "ID_PGM5\020p\022\014\n\010ID_PGM5v\020q\022\013\n\007ID_PRV5\020r\022\013\n\007"
      "ID_PGM6\020s\022\014\n\010ID_PGM6v\020t\022\013\n\007ID_PRV6\020u\022\013\n\007"
      "ID_PGM7\020v\022\014\n\010ID_PGM7v\020w\022\013\n\007ID_PRV7\020x\022\013\n\007"
      "ID_PGM8\020y\022\014\n\010ID_PGM8v\020z\022\013\n\007ID_PRV8\020{\022\016\n\t"
      "ID_Live_0\020\226\001\022\017\n\nID_Live_15\020\245\001\022\017\n\nID_Live"
      "_31\020\265\001\022\025\n\020ID_Live_PGMDirty\020\266\001\022\025\n\020ID_Live"
      "_PGMClean\020\267\001\022\023\n\016ID_Live_Import\020\270\001\022\021\n\014ID_"
      "Live_PGM2\020\271\001\022\021\n\014ID_Live_PGM3\020\272\001\022\021\n\014ID_Li"
      "ve_PGM4\020\273\001\022\021\n\014ID_Live_PGM5\020\274\001\022\021\n\014ID_Live"
      "_PGM6\020\275\001\022\021\n\014ID_Live_PGM7\020\276\001\022\021\n\014ID_Live_P"
      "GM8\020\277\001\022\021\n\014ID_Replay3_0\020\300\001\022\022\n\rID_Replay3_"
      "15\020\317\001\022\022\n\rID_Replay3_31\020\337\001\022\030\n\023ID_Replay3_"
      "PGMDirty\020\340\001\022\030\n\023ID_Replay3_PGMClean\020\341\001\022\026\n"
      "\021ID_Replay3_Import\020\342\001\022\024\n\017ID_PGM2_480_270"
      "\020\343\001\022\024\n\017ID_PGM3_480_270\020\344\001\022\024\n\017ID_PGM4_480"
      "_270\020\345\001\022\024\n\017ID_PGM5_480_270\020\346\001\022\024\n\017ID_PGM6"
      "_480_270\020\347\001\022\024\n\017ID_PGM7_480_270\020\350\001\022\024\n\017ID_"
      "PGM8_480_270\020\351\001\022\r\n\010ID_TGA_0\020\352\001\022\r\n\010ID_TGA"
      "_1\020\353\001\022\017\n\nID_Cnl_Max\020\354\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "broadcast.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_broadcast_2eproto
namespace GoogleProtoBB {
const ::google::protobuf::EnumDescriptor* BroadcastInfoKey_descriptor() {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_broadcast_2eproto::file_level_enum_descriptors[0];
}
bool BroadcastInfoKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CnlID_descriptor() {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_broadcast_2eproto::file_level_enum_descriptors[1];
}
bool CnlID_IsValid(int value) {
  switch (value) {
    case 0:
    case 15:
    case 31:
    case 32:
    case 33:
    case 34:
    case 50:
    case 65:
    case 81:
    case 82:
    case 83:
    case 84:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 150:
    case 165:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 207:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Value_Recorder_Train_In_Out::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Recorder_Train_In_Out::kCountFieldNumber;
const int Value_Recorder_Train_In_Out::kTrainInFieldNumber;
const int Value_Recorder_Train_In_Out::kTrainOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Recorder_Train_In_Out::Value_Recorder_Train_In_Out()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Recorder_Train_In_Out.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Recorder_Train_In_Out)
}
Value_Recorder_Train_In_Out::Value_Recorder_Train_In_Out(const Value_Recorder_Train_In_Out& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trainin_(from.trainin_),
      trainout_(from.trainout_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Recorder_Train_In_Out)
}

void Value_Recorder_Train_In_Out::SharedCtor() {
  count_ = 0u;
}

Value_Recorder_Train_In_Out::~Value_Recorder_Train_In_Out() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Recorder_Train_In_Out)
  SharedDtor();
}

void Value_Recorder_Train_In_Out::SharedDtor() {
}

void Value_Recorder_Train_In_Out::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Recorder_Train_In_Out::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Recorder_Train_In_Out& Value_Recorder_Train_In_Out::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Recorder_Train_In_Out.base);
  return *internal_default_instance();
}


void Value_Recorder_Train_In_Out::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trainin_.Clear();
  trainout_.Clear();
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Value_Recorder_Train_In_Out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 trainIn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_trainin())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_trainin())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 trainOut = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_trainout())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_trainout())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Recorder_Train_In_Out)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Recorder_Train_In_Out)
  return false;
#undef DO_
}

void Value_Recorder_Train_In_Out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated uint64 trainIn = 2;
  if (this->trainin_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _trainin_cached_byte_size_));
  }
  for (int i = 0, n = this->trainin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->trainin(i), output);
  }

  // repeated uint64 trainOut = 3;
  if (this->trainout_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _trainout_cached_byte_size_));
  }
  for (int i = 0, n = this->trainout_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->trainout(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Recorder_Train_In_Out)
}

::google::protobuf::uint8* Value_Recorder_Train_In_Out::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated uint64 trainIn = 2;
  if (this->trainin_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _trainin_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->trainin_, target);
  }

  // repeated uint64 trainOut = 3;
  if (this->trainout_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _trainout_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->trainout_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Recorder_Train_In_Out)
  return target;
}

size_t Value_Recorder_Train_In_Out::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 trainIn = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->trainin_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _trainin_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 trainOut = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->trainout_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _trainout_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Recorder_Train_In_Out::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Recorder_Train_In_Out* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Recorder_Train_In_Out>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Recorder_Train_In_Out)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Recorder_Train_In_Out)
    MergeFrom(*source);
  }
}

void Value_Recorder_Train_In_Out::MergeFrom(const Value_Recorder_Train_In_Out& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trainin_.MergeFrom(from.trainin_);
  trainout_.MergeFrom(from.trainout_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Value_Recorder_Train_In_Out::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Recorder_Train_In_Out::CopyFrom(const Value_Recorder_Train_In_Out& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Recorder_Train_In_Out)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Recorder_Train_In_Out::IsInitialized() const {
  return true;
}

void Value_Recorder_Train_In_Out::Swap(Value_Recorder_Train_In_Out* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Recorder_Train_In_Out::InternalSwap(Value_Recorder_Train_In_Out* other) {
  using std::swap;
  trainin_.InternalSwap(&other->trainin_);
  trainout_.InternalSwap(&other->trainout_);
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Recorder_Train_In_Out::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Player_Status_StatusInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Player_Status_StatusInfo::kIdFieldNumber;
const int Value_Player_Status_StatusInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Player_Status_StatusInfo::Value_Player_Status_StatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Player_Status_StatusInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Player_Status.StatusInfo)
}
Value_Player_Status_StatusInfo::Value_Player_Status_StatusInfo(const Value_Player_Status_StatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Player_Status.StatusInfo)
}

void Value_Player_Status_StatusInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

Value_Player_Status_StatusInfo::~Value_Player_Status_StatusInfo() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Player_Status.StatusInfo)
  SharedDtor();
}

void Value_Player_Status_StatusInfo::SharedDtor() {
}

void Value_Player_Status_StatusInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Player_Status_StatusInfo::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Player_Status_StatusInfo& Value_Player_Status_StatusInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Player_Status_StatusInfo.base);
  return *internal_default_instance();
}


void Value_Player_Status_StatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool Value_Player_Status_StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GoogleProtoBB.CnlID id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::GoogleProtoBB::CnlID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Player_Status.StatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Player_Status.StatusInfo)
  return false;
#undef DO_
}

void Value_Player_Status_StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoogleProtoBB.CnlID id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Player_Status.StatusInfo)
}

::google::protobuf::uint8* Value_Player_Status_StatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoogleProtoBB.CnlID id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Player_Status.StatusInfo)
  return target;
}

size_t Value_Player_Status_StatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GoogleProtoBB.CnlID id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  // uint32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Player_Status_StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Player_Status_StatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Player_Status_StatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Player_Status.StatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Player_Status.StatusInfo)
    MergeFrom(*source);
  }
}

void Value_Player_Status_StatusInfo::MergeFrom(const Value_Player_Status_StatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Value_Player_Status_StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Player_Status_StatusInfo::CopyFrom(const Value_Player_Status_StatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Player_Status.StatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Player_Status_StatusInfo::IsInitialized() const {
  return true;
}

void Value_Player_Status_StatusInfo::Swap(Value_Player_Status_StatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Player_Status_StatusInfo::InternalSwap(Value_Player_Status_StatusInfo* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Player_Status_StatusInfo::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Player_Status::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Player_Status::kCountFieldNumber;
const int Value_Player_Status::kStatusInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Player_Status::Value_Player_Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Player_Status.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Player_Status)
}
Value_Player_Status::Value_Player_Status(const Value_Player_Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      statusinfo_(from.statusinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Player_Status)
}

void Value_Player_Status::SharedCtor() {
  count_ = 0u;
}

Value_Player_Status::~Value_Player_Status() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Player_Status)
  SharedDtor();
}

void Value_Player_Status::SharedDtor() {
}

void Value_Player_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Player_Status::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Player_Status& Value_Player_Status::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Player_Status.base);
  return *internal_default_instance();
}


void Value_Player_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Player_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statusinfo_.Clear();
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Value_Player_Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Player_Status)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GoogleProtoBB.Value_Player_Status.StatusInfo statusInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_statusinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Player_Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Player_Status)
  return false;
#undef DO_
}

void Value_Player_Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Player_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .GoogleProtoBB.Value_Player_Status.StatusInfo statusInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statusinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->statusinfo(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Player_Status)
}

::google::protobuf::uint8* Value_Player_Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Player_Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .GoogleProtoBB.Value_Player_Status.StatusInfo statusInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->statusinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->statusinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Player_Status)
  return target;
}

size_t Value_Player_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Player_Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GoogleProtoBB.Value_Player_Status.StatusInfo statusInfo = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->statusinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->statusinfo(static_cast<int>(i)));
    }
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Player_Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Player_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Player_Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Player_Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Player_Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Player_Status)
    MergeFrom(*source);
  }
}

void Value_Player_Status::MergeFrom(const Value_Player_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Player_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  statusinfo_.MergeFrom(from.statusinfo_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Value_Player_Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Player_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Player_Status::CopyFrom(const Value_Player_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Player_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Player_Status::IsInitialized() const {
  return true;
}

void Value_Player_Status::Swap(Value_Player_Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Player_Status::InternalSwap(Value_Player_Status* other) {
  using std::swap;
  CastToBase(&statusinfo_)->InternalSwap(CastToBase(&other->statusinfo_));
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Player_Status::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Camera_Type_ItemInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Camera_Type_ItemInfo::kCamIDFieldNumber;
const int Value_Camera_Type_ItemInfo::kIsNetworkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Camera_Type_ItemInfo::Value_Camera_Type_ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Camera_Type_ItemInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Camera_Type.ItemInfo)
}
Value_Camera_Type_ItemInfo::Value_Camera_Type_ItemInfo(const Value_Camera_Type_ItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camid_, &from.camid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isnetworking_) -
    reinterpret_cast<char*>(&camid_)) + sizeof(isnetworking_));
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Camera_Type.ItemInfo)
}

void Value_Camera_Type_ItemInfo::SharedCtor() {
  ::memset(&camid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isnetworking_) -
      reinterpret_cast<char*>(&camid_)) + sizeof(isnetworking_));
}

Value_Camera_Type_ItemInfo::~Value_Camera_Type_ItemInfo() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  SharedDtor();
}

void Value_Camera_Type_ItemInfo::SharedDtor() {
}

void Value_Camera_Type_ItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Camera_Type_ItemInfo::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Camera_Type_ItemInfo& Value_Camera_Type_ItemInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Camera_Type_ItemInfo.base);
  return *internal_default_instance();
}


void Value_Camera_Type_ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isnetworking_) -
      reinterpret_cast<char*>(&camid_)) + sizeof(isnetworking_));
  _internal_metadata_.Clear();
}

bool Value_Camera_Type_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isNetworking = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnetworking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  return false;
#undef DO_
}

void Value_Camera_Type_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camID = 1;
  if (this->camid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camid(), output);
  }

  // bool isNetworking = 2;
  if (this->isnetworking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isnetworking(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Camera_Type.ItemInfo)
}

::google::protobuf::uint8* Value_Camera_Type_ItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camID = 1;
  if (this->camid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camid(), target);
  }

  // bool isNetworking = 2;
  if (this->isnetworking() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isnetworking(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  return target;
}

size_t Value_Camera_Type_ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 camID = 1;
  if (this->camid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camid());
  }

  // bool isNetworking = 2;
  if (this->isnetworking() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Camera_Type_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Camera_Type_ItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Camera_Type_ItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Camera_Type.ItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Camera_Type.ItemInfo)
    MergeFrom(*source);
  }
}

void Value_Camera_Type_ItemInfo::MergeFrom(const Value_Camera_Type_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camid() != 0) {
    set_camid(from.camid());
  }
  if (from.isnetworking() != 0) {
    set_isnetworking(from.isnetworking());
  }
}

void Value_Camera_Type_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Camera_Type_ItemInfo::CopyFrom(const Value_Camera_Type_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Camera_Type.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Camera_Type_ItemInfo::IsInitialized() const {
  return true;
}

void Value_Camera_Type_ItemInfo::Swap(Value_Camera_Type_ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Camera_Type_ItemInfo::InternalSwap(Value_Camera_Type_ItemInfo* other) {
  using std::swap;
  swap(camid_, other->camid_);
  swap(isnetworking_, other->isnetworking_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Camera_Type_ItemInfo::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Camera_Type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Camera_Type::kCountFieldNumber;
const int Value_Camera_Type::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Camera_Type::Value_Camera_Type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Camera_Type.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Camera_Type)
}
Value_Camera_Type::Value_Camera_Type(const Value_Camera_Type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Camera_Type)
}

void Value_Camera_Type::SharedCtor() {
  count_ = 0u;
}

Value_Camera_Type::~Value_Camera_Type() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Camera_Type)
  SharedDtor();
}

void Value_Camera_Type::SharedDtor() {
}

void Value_Camera_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Camera_Type::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Camera_Type& Value_Camera_Type::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Camera_Type.base);
  return *internal_default_instance();
}


void Value_Camera_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Camera_Type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Value_Camera_Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Camera_Type)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GoogleProtoBB.Value_Camera_Type.ItemInfo items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Camera_Type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Camera_Type)
  return false;
#undef DO_
}

void Value_Camera_Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Camera_Type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .GoogleProtoBB.Value_Camera_Type.ItemInfo items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Camera_Type)
}

::google::protobuf::uint8* Value_Camera_Type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Camera_Type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .GoogleProtoBB.Value_Camera_Type.ItemInfo items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Camera_Type)
  return target;
}

size_t Value_Camera_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Camera_Type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GoogleProtoBB.Value_Camera_Type.ItemInfo items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Camera_Type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Camera_Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Camera_Type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Camera_Type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Camera_Type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Camera_Type)
    MergeFrom(*source);
  }
}

void Value_Camera_Type::MergeFrom(const Value_Camera_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Camera_Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Value_Camera_Type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Camera_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Camera_Type::CopyFrom(const Value_Camera_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Camera_Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Camera_Type::IsInitialized() const {
  return true;
}

void Value_Camera_Type::Swap(Value_Camera_Type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Camera_Type::InternalSwap(Value_Camera_Type* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Camera_Type::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Recorder_ClosedCaption_ItemInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Recorder_ClosedCaption_ItemInfo::kCamIDFieldNumber;
const int Value_Recorder_ClosedCaption_ItemInfo::kHasClosedCaptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Recorder_ClosedCaption_ItemInfo::Value_Recorder_ClosedCaption_ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Recorder_ClosedCaption_ItemInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
}
Value_Recorder_ClosedCaption_ItemInfo::Value_Recorder_ClosedCaption_ItemInfo(const Value_Recorder_ClosedCaption_ItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camid_, &from.camid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasclosedcaption_) -
    reinterpret_cast<char*>(&camid_)) + sizeof(hasclosedcaption_));
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
}

void Value_Recorder_ClosedCaption_ItemInfo::SharedCtor() {
  ::memset(&camid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasclosedcaption_) -
      reinterpret_cast<char*>(&camid_)) + sizeof(hasclosedcaption_));
}

Value_Recorder_ClosedCaption_ItemInfo::~Value_Recorder_ClosedCaption_ItemInfo() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  SharedDtor();
}

void Value_Recorder_ClosedCaption_ItemInfo::SharedDtor() {
}

void Value_Recorder_ClosedCaption_ItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Recorder_ClosedCaption_ItemInfo::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Recorder_ClosedCaption_ItemInfo& Value_Recorder_ClosedCaption_ItemInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Recorder_ClosedCaption_ItemInfo.base);
  return *internal_default_instance();
}


void Value_Recorder_ClosedCaption_ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasclosedcaption_) -
      reinterpret_cast<char*>(&camid_)) + sizeof(hasclosedcaption_));
  _internal_metadata_.Clear();
}

bool Value_Recorder_ClosedCaption_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 camID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasClosedCaption = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasclosedcaption_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  return false;
#undef DO_
}

void Value_Recorder_ClosedCaption_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camID = 1;
  if (this->camid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camid(), output);
  }

  // bool hasClosedCaption = 2;
  if (this->hasclosedcaption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasclosedcaption(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
}

::google::protobuf::uint8* Value_Recorder_ClosedCaption_ItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camID = 1;
  if (this->camid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camid(), target);
  }

  // bool hasClosedCaption = 2;
  if (this->hasclosedcaption() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasclosedcaption(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  return target;
}

size_t Value_Recorder_ClosedCaption_ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 camID = 1;
  if (this->camid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camid());
  }

  // bool hasClosedCaption = 2;
  if (this->hasclosedcaption() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Recorder_ClosedCaption_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Recorder_ClosedCaption_ItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Recorder_ClosedCaption_ItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
    MergeFrom(*source);
  }
}

void Value_Recorder_ClosedCaption_ItemInfo::MergeFrom(const Value_Recorder_ClosedCaption_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camid() != 0) {
    set_camid(from.camid());
  }
  if (from.hasclosedcaption() != 0) {
    set_hasclosedcaption(from.hasclosedcaption());
  }
}

void Value_Recorder_ClosedCaption_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Recorder_ClosedCaption_ItemInfo::CopyFrom(const Value_Recorder_ClosedCaption_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Recorder_ClosedCaption_ItemInfo::IsInitialized() const {
  return true;
}

void Value_Recorder_ClosedCaption_ItemInfo::Swap(Value_Recorder_ClosedCaption_ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Recorder_ClosedCaption_ItemInfo::InternalSwap(Value_Recorder_ClosedCaption_ItemInfo* other) {
  using std::swap;
  swap(camid_, other->camid_);
  swap(hasclosedcaption_, other->hasclosedcaption_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Recorder_ClosedCaption_ItemInfo::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Recorder_ClosedCaption::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Recorder_ClosedCaption::kCountFieldNumber;
const int Value_Recorder_ClosedCaption::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Recorder_ClosedCaption::Value_Recorder_ClosedCaption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Recorder_ClosedCaption.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Recorder_ClosedCaption)
}
Value_Recorder_ClosedCaption::Value_Recorder_ClosedCaption(const Value_Recorder_ClosedCaption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Recorder_ClosedCaption)
}

void Value_Recorder_ClosedCaption::SharedCtor() {
  count_ = 0u;
}

Value_Recorder_ClosedCaption::~Value_Recorder_ClosedCaption() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Recorder_ClosedCaption)
  SharedDtor();
}

void Value_Recorder_ClosedCaption::SharedDtor() {
}

void Value_Recorder_ClosedCaption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Recorder_ClosedCaption::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Recorder_ClosedCaption& Value_Recorder_ClosedCaption::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Recorder_ClosedCaption.base);
  return *internal_default_instance();
}


void Value_Recorder_ClosedCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Value_Recorder_ClosedCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Recorder_ClosedCaption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Recorder_ClosedCaption)
  return false;
#undef DO_
}

void Value_Recorder_ClosedCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Recorder_ClosedCaption)
}

::google::protobuf::uint8* Value_Recorder_ClosedCaption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Recorder_ClosedCaption)
  return target;
}

size_t Value_Recorder_ClosedCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GoogleProtoBB.Value_Recorder_ClosedCaption.ItemInfo items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Recorder_ClosedCaption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Recorder_ClosedCaption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Recorder_ClosedCaption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Recorder_ClosedCaption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Recorder_ClosedCaption)
    MergeFrom(*source);
  }
}

void Value_Recorder_ClosedCaption::MergeFrom(const Value_Recorder_ClosedCaption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Value_Recorder_ClosedCaption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Recorder_ClosedCaption::CopyFrom(const Value_Recorder_ClosedCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Recorder_ClosedCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Recorder_ClosedCaption::IsInitialized() const {
  return true;
}

void Value_Recorder_ClosedCaption::Swap(Value_Recorder_ClosedCaption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Recorder_ClosedCaption::InternalSwap(Value_Recorder_ClosedCaption* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Recorder_ClosedCaption::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Player_ClosedCaption_ItemInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Player_ClosedCaption_ItemInfo::kPlayeridFieldNumber;
const int Value_Player_ClosedCaption_ItemInfo::kHasClosedCaptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Player_ClosedCaption_ItemInfo::Value_Player_ClosedCaption_ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Player_ClosedCaption_ItemInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
}
Value_Player_ClosedCaption_ItemInfo::Value_Player_ClosedCaption_ItemInfo(const Value_Player_ClosedCaption_ItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasclosedcaption_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(hasclosedcaption_));
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
}

void Value_Player_ClosedCaption_ItemInfo::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasclosedcaption_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(hasclosedcaption_));
}

Value_Player_ClosedCaption_ItemInfo::~Value_Player_ClosedCaption_ItemInfo() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  SharedDtor();
}

void Value_Player_ClosedCaption_ItemInfo::SharedDtor() {
}

void Value_Player_ClosedCaption_ItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Player_ClosedCaption_ItemInfo::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Player_ClosedCaption_ItemInfo& Value_Player_ClosedCaption_ItemInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Player_ClosedCaption_ItemInfo.base);
  return *internal_default_instance();
}


void Value_Player_ClosedCaption_ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasclosedcaption_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(hasclosedcaption_));
  _internal_metadata_.Clear();
}

bool Value_Player_ClosedCaption_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasClosedCaption = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasclosedcaption_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  return false;
#undef DO_
}

void Value_Player_ClosedCaption_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // bool hasClosedCaption = 2;
  if (this->hasclosedcaption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasclosedcaption(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
}

::google::protobuf::uint8* Value_Player_ClosedCaption_ItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // bool hasClosedCaption = 2;
  if (this->hasclosedcaption() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasclosedcaption(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  return target;
}

size_t Value_Player_ClosedCaption_ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playerid());
  }

  // bool hasClosedCaption = 2;
  if (this->hasclosedcaption() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Player_ClosedCaption_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Player_ClosedCaption_ItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Player_ClosedCaption_ItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
    MergeFrom(*source);
  }
}

void Value_Player_ClosedCaption_ItemInfo::MergeFrom(const Value_Player_ClosedCaption_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.hasclosedcaption() != 0) {
    set_hasclosedcaption(from.hasclosedcaption());
  }
}

void Value_Player_ClosedCaption_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Player_ClosedCaption_ItemInfo::CopyFrom(const Value_Player_ClosedCaption_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Player_ClosedCaption_ItemInfo::IsInitialized() const {
  return true;
}

void Value_Player_ClosedCaption_ItemInfo::Swap(Value_Player_ClosedCaption_ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Player_ClosedCaption_ItemInfo::InternalSwap(Value_Player_ClosedCaption_ItemInfo* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(hasclosedcaption_, other->hasclosedcaption_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Player_ClosedCaption_ItemInfo::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Value_Player_ClosedCaption::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value_Player_ClosedCaption::kCountFieldNumber;
const int Value_Player_ClosedCaption::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value_Player_ClosedCaption::Value_Player_ClosedCaption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_Value_Player_ClosedCaption.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.Value_Player_ClosedCaption)
}
Value_Player_ClosedCaption::Value_Player_ClosedCaption(const Value_Player_ClosedCaption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.Value_Player_ClosedCaption)
}

void Value_Player_ClosedCaption::SharedCtor() {
  count_ = 0u;
}

Value_Player_ClosedCaption::~Value_Player_ClosedCaption() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.Value_Player_ClosedCaption)
  SharedDtor();
}

void Value_Player_ClosedCaption::SharedDtor() {
}

void Value_Player_ClosedCaption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Value_Player_ClosedCaption::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Value_Player_ClosedCaption& Value_Player_ClosedCaption::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_Value_Player_ClosedCaption.base);
  return *internal_default_instance();
}


void Value_Player_ClosedCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.Value_Player_ClosedCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  count_ = 0u;
  _internal_metadata_.Clear();
}

bool Value_Player_ClosedCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.Value_Player_ClosedCaption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.Value_Player_ClosedCaption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.Value_Player_ClosedCaption)
  return false;
#undef DO_
}

void Value_Player_ClosedCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.Value_Player_ClosedCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // repeated .GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->items(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.Value_Player_ClosedCaption)
}

::google::protobuf::uint8* Value_Player_ClosedCaption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.Value_Player_ClosedCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // repeated .GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->items(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.Value_Player_ClosedCaption)
  return target;
}

size_t Value_Player_ClosedCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.Value_Player_ClosedCaption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .GoogleProtoBB.Value_Player_ClosedCaption.ItemInfo items = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value_Player_ClosedCaption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.Value_Player_ClosedCaption)
  GOOGLE_DCHECK_NE(&from, this);
  const Value_Player_ClosedCaption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value_Player_ClosedCaption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.Value_Player_ClosedCaption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.Value_Player_ClosedCaption)
    MergeFrom(*source);
  }
}

void Value_Player_ClosedCaption::MergeFrom(const Value_Player_ClosedCaption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.Value_Player_ClosedCaption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void Value_Player_ClosedCaption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.Value_Player_ClosedCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Player_ClosedCaption::CopyFrom(const Value_Player_ClosedCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.Value_Player_ClosedCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Player_ClosedCaption::IsInitialized() const {
  return true;
}

void Value_Player_ClosedCaption::Swap(Value_Player_ClosedCaption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value_Player_ClosedCaption::InternalSwap(Value_Player_ClosedCaption* other) {
  using std::swap;
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
  swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Value_Player_ClosedCaption::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BroadCastData::InitAsDefaultInstance() {
  ::GoogleProtoBB::_BroadCastData_default_instance_._instance.get_mutable()->recorder_train_in_out_ = const_cast< ::GoogleProtoBB::Value_Recorder_Train_In_Out*>(
      ::GoogleProtoBB::Value_Recorder_Train_In_Out::internal_default_instance());
  ::GoogleProtoBB::_BroadCastData_default_instance_._instance.get_mutable()->player_status_ = const_cast< ::GoogleProtoBB::Value_Player_Status*>(
      ::GoogleProtoBB::Value_Player_Status::internal_default_instance());
  ::GoogleProtoBB::_BroadCastData_default_instance_._instance.get_mutable()->camera_type_ = const_cast< ::GoogleProtoBB::Value_Camera_Type*>(
      ::GoogleProtoBB::Value_Camera_Type::internal_default_instance());
  ::GoogleProtoBB::_BroadCastData_default_instance_._instance.get_mutable()->recorder_closedcaption_ = const_cast< ::GoogleProtoBB::Value_Recorder_ClosedCaption*>(
      ::GoogleProtoBB::Value_Recorder_ClosedCaption::internal_default_instance());
  ::GoogleProtoBB::_BroadCastData_default_instance_._instance.get_mutable()->player_closedcaption_ = const_cast< ::GoogleProtoBB::Value_Player_ClosedCaption*>(
      ::GoogleProtoBB::Value_Player_ClosedCaption::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadCastData::kRecorderTrainInOutFieldNumber;
const int BroadCastData::kPlayerStatusFieldNumber;
const int BroadCastData::kCameraTypeFieldNumber;
const int BroadCastData::kRecorderClosedCaptionFieldNumber;
const int BroadCastData::kPlayerClosedCaptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadCastData::BroadCastData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_broadcast_2eproto::scc_info_BroadCastData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GoogleProtoBB.BroadCastData)
}
BroadCastData::BroadCastData(const BroadCastData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_recorder_train_in_out()) {
    recorder_train_in_out_ = new ::GoogleProtoBB::Value_Recorder_Train_In_Out(*from.recorder_train_in_out_);
  } else {
    recorder_train_in_out_ = NULL;
  }
  if (from.has_player_status()) {
    player_status_ = new ::GoogleProtoBB::Value_Player_Status(*from.player_status_);
  } else {
    player_status_ = NULL;
  }
  if (from.has_camera_type()) {
    camera_type_ = new ::GoogleProtoBB::Value_Camera_Type(*from.camera_type_);
  } else {
    camera_type_ = NULL;
  }
  if (from.has_recorder_closedcaption()) {
    recorder_closedcaption_ = new ::GoogleProtoBB::Value_Recorder_ClosedCaption(*from.recorder_closedcaption_);
  } else {
    recorder_closedcaption_ = NULL;
  }
  if (from.has_player_closedcaption()) {
    player_closedcaption_ = new ::GoogleProtoBB::Value_Player_ClosedCaption(*from.player_closedcaption_);
  } else {
    player_closedcaption_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GoogleProtoBB.BroadCastData)
}

void BroadCastData::SharedCtor() {
  ::memset(&recorder_train_in_out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_closedcaption_) -
      reinterpret_cast<char*>(&recorder_train_in_out_)) + sizeof(player_closedcaption_));
}

BroadCastData::~BroadCastData() {
  // @@protoc_insertion_point(destructor:GoogleProtoBB.BroadCastData)
  SharedDtor();
}

void BroadCastData::SharedDtor() {
  if (this != internal_default_instance()) delete recorder_train_in_out_;
  if (this != internal_default_instance()) delete player_status_;
  if (this != internal_default_instance()) delete camera_type_;
  if (this != internal_default_instance()) delete recorder_closedcaption_;
  if (this != internal_default_instance()) delete player_closedcaption_;
}

void BroadCastData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BroadCastData::descriptor() {
  ::protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BroadCastData& BroadCastData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_broadcast_2eproto::scc_info_BroadCastData.base);
  return *internal_default_instance();
}


void BroadCastData::Clear() {
// @@protoc_insertion_point(message_clear_start:GoogleProtoBB.BroadCastData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && recorder_train_in_out_ != NULL) {
    delete recorder_train_in_out_;
  }
  recorder_train_in_out_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_status_ != NULL) {
    delete player_status_;
  }
  player_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && camera_type_ != NULL) {
    delete camera_type_;
  }
  camera_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && recorder_closedcaption_ != NULL) {
    delete recorder_closedcaption_;
  }
  recorder_closedcaption_ = NULL;
  if (GetArenaNoVirtual() == NULL && player_closedcaption_ != NULL) {
    delete player_closedcaption_;
  }
  player_closedcaption_ = NULL;
  _internal_metadata_.Clear();
}

bool BroadCastData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GoogleProtoBB.BroadCastData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GoogleProtoBB.Value_Recorder_Train_In_Out Recorder_Train_In_Out = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recorder_train_in_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GoogleProtoBB.Value_Player_Status Player_Status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GoogleProtoBB.Value_Camera_Type camera_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GoogleProtoBB.Value_Recorder_ClosedCaption Recorder_ClosedCaption = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recorder_closedcaption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GoogleProtoBB.Value_Player_ClosedCaption Player_ClosedCaption = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_closedcaption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GoogleProtoBB.BroadCastData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GoogleProtoBB.BroadCastData)
  return false;
#undef DO_
}

void BroadCastData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GoogleProtoBB.BroadCastData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoogleProtoBB.Value_Recorder_Train_In_Out Recorder_Train_In_Out = 1;
  if (this->has_recorder_train_in_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_recorder_train_in_out(), output);
  }

  // .GoogleProtoBB.Value_Player_Status Player_Status = 2;
  if (this->has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_player_status(), output);
  }

  // .GoogleProtoBB.Value_Camera_Type camera_type = 3;
  if (this->has_camera_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_camera_type(), output);
  }

  // .GoogleProtoBB.Value_Recorder_ClosedCaption Recorder_ClosedCaption = 4;
  if (this->has_recorder_closedcaption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_recorder_closedcaption(), output);
  }

  // .GoogleProtoBB.Value_Player_ClosedCaption Player_ClosedCaption = 5;
  if (this->has_player_closedcaption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_player_closedcaption(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GoogleProtoBB.BroadCastData)
}

::google::protobuf::uint8* BroadCastData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GoogleProtoBB.BroadCastData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GoogleProtoBB.Value_Recorder_Train_In_Out Recorder_Train_In_Out = 1;
  if (this->has_recorder_train_in_out()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_recorder_train_in_out(), deterministic, target);
  }

  // .GoogleProtoBB.Value_Player_Status Player_Status = 2;
  if (this->has_player_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_player_status(), deterministic, target);
  }

  // .GoogleProtoBB.Value_Camera_Type camera_type = 3;
  if (this->has_camera_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_camera_type(), deterministic, target);
  }

  // .GoogleProtoBB.Value_Recorder_ClosedCaption Recorder_ClosedCaption = 4;
  if (this->has_recorder_closedcaption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_recorder_closedcaption(), deterministic, target);
  }

  // .GoogleProtoBB.Value_Player_ClosedCaption Player_ClosedCaption = 5;
  if (this->has_player_closedcaption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_player_closedcaption(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GoogleProtoBB.BroadCastData)
  return target;
}

size_t BroadCastData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GoogleProtoBB.BroadCastData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .GoogleProtoBB.Value_Recorder_Train_In_Out Recorder_Train_In_Out = 1;
  if (this->has_recorder_train_in_out()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *recorder_train_in_out_);
  }

  // .GoogleProtoBB.Value_Player_Status Player_Status = 2;
  if (this->has_player_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_status_);
  }

  // .GoogleProtoBB.Value_Camera_Type camera_type = 3;
  if (this->has_camera_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_type_);
  }

  // .GoogleProtoBB.Value_Recorder_ClosedCaption Recorder_ClosedCaption = 4;
  if (this->has_recorder_closedcaption()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *recorder_closedcaption_);
  }

  // .GoogleProtoBB.Value_Player_ClosedCaption Player_ClosedCaption = 5;
  if (this->has_player_closedcaption()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_closedcaption_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadCastData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GoogleProtoBB.BroadCastData)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadCastData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadCastData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GoogleProtoBB.BroadCastData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GoogleProtoBB.BroadCastData)
    MergeFrom(*source);
  }
}

void BroadCastData::MergeFrom(const BroadCastData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GoogleProtoBB.BroadCastData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recorder_train_in_out()) {
    mutable_recorder_train_in_out()->::GoogleProtoBB::Value_Recorder_Train_In_Out::MergeFrom(from.recorder_train_in_out());
  }
  if (from.has_player_status()) {
    mutable_player_status()->::GoogleProtoBB::Value_Player_Status::MergeFrom(from.player_status());
  }
  if (from.has_camera_type()) {
    mutable_camera_type()->::GoogleProtoBB::Value_Camera_Type::MergeFrom(from.camera_type());
  }
  if (from.has_recorder_closedcaption()) {
    mutable_recorder_closedcaption()->::GoogleProtoBB::Value_Recorder_ClosedCaption::MergeFrom(from.recorder_closedcaption());
  }
  if (from.has_player_closedcaption()) {
    mutable_player_closedcaption()->::GoogleProtoBB::Value_Player_ClosedCaption::MergeFrom(from.player_closedcaption());
  }
}

void BroadCastData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GoogleProtoBB.BroadCastData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCastData::CopyFrom(const BroadCastData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GoogleProtoBB.BroadCastData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCastData::IsInitialized() const {
  return true;
}

void BroadCastData::Swap(BroadCastData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BroadCastData::InternalSwap(BroadCastData* other) {
  using std::swap;
  swap(recorder_train_in_out_, other->recorder_train_in_out_);
  swap(player_status_, other->player_status_);
  swap(camera_type_, other->camera_type_);
  swap(recorder_closedcaption_, other->recorder_closedcaption_);
  swap(player_closedcaption_, other->player_closedcaption_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BroadCastData::GetMetadata() const {
  protobuf_broadcast_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_broadcast_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GoogleProtoBB
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Recorder_Train_In_Out* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Recorder_Train_In_Out >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Recorder_Train_In_Out >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Player_Status_StatusInfo* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Player_Status_StatusInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Player_Status_StatusInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Player_Status* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Player_Status >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Player_Status >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Camera_Type_ItemInfo* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Camera_Type_ItemInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Camera_Type_ItemInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Camera_Type* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Camera_Type >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Camera_Type >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Recorder_ClosedCaption_ItemInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Recorder_ClosedCaption* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Recorder_ClosedCaption >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Recorder_ClosedCaption >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Player_ClosedCaption_ItemInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::Value_Player_ClosedCaption* Arena::CreateMaybeMessage< ::GoogleProtoBB::Value_Player_ClosedCaption >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::Value_Player_ClosedCaption >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GoogleProtoBB::BroadCastData* Arena::CreateMaybeMessage< ::GoogleProtoBB::BroadCastData >(Arena* arena) {
  return Arena::CreateInternal< ::GoogleProtoBB::BroadCastData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
