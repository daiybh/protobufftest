// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: broadcast.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GoogleProtoBB {

  /// <summary>Holder for reflection information generated from broadcast.proto</summary>
  public static partial class BroadcastReflection {

    #region Descriptor
    /// <summary>File descriptor for broadcast.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BroadcastReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9icm9hZGNhc3QucHJvdG8SDUdvb2dsZVByb3RvQkIiTwobVmFsdWVfUmVj",
            "b3JkZXJfVHJhaW5fSW5fT3V0Eg0KBWNvdW50GAEgASgNEg8KB3RyYWluSW4Y",
            "AiADKAQSEAoIdHJhaW5PdXQYAyADKAQipwEKE1ZhbHVlX1BsYXllcl9TdGF0",
            "dXMSDQoFY291bnQYASABKA0SQQoKc3RhdHVzSW5mbxgCIAMoCzItLkdvb2ds",
            "ZVByb3RvQkIuVmFsdWVfUGxheWVyX1N0YXR1cy5TdGF0dXNJbmZvGj4KClN0",
            "YXR1c0luZm8SIAoCaWQYASABKA4yFC5Hb29nbGVQcm90b0JCLkNubElEEg4K",
            "BnN0YXR1cxgCIAEoDSKNAQoRVmFsdWVfQ2FtZXJhX1R5cGUSDQoFY291bnQY",
            "ASABKA0SOAoFaXRlbXMYAiADKAsyKS5Hb29nbGVQcm90b0JCLlZhbHVlX0Nh",
            "bWVyYV9UeXBlLkl0ZW1JbmZvGi8KCEl0ZW1JbmZvEg0KBWNhbUlEGAEgASgN",
            "EhQKDGlzTmV0d29ya2luZxgCIAEoCCKnAQocVmFsdWVfUmVjb3JkZXJfQ2xv",
            "c2VkQ2FwdGlvbhINCgVjb3VudBgBIAEoDRJDCgVpdGVtcxgCIAMoCzI0Lkdv",
            "b2dsZVByb3RvQkIuVmFsdWVfUmVjb3JkZXJfQ2xvc2VkQ2FwdGlvbi5JdGVt",
            "SW5mbxozCghJdGVtSW5mbxINCgVjYW1JRBgBIAEoDRIYChBoYXNDbG9zZWRD",
            "YXB0aW9uGAIgASgIIqYBChpWYWx1ZV9QbGF5ZXJfQ2xvc2VkQ2FwdGlvbhIN",
            "CgVjb3VudBgBIAEoDRJBCgVpdGVtcxgCIAMoCzIyLkdvb2dsZVByb3RvQkIu",
            "VmFsdWVfUGxheWVyX0Nsb3NlZENhcHRpb24uSXRlbUluZm8aNgoISXRlbUlu",
            "Zm8SEAoIcGxheWVyaWQYASABKA0SGAoQaGFzQ2xvc2VkQ2FwdGlvbhgCIAEo",
            "CCLiAgoNQnJvYWRDYXN0RGF0YRJJChVSZWNvcmRlcl9UcmFpbl9Jbl9PdXQY",
            "ASABKAsyKi5Hb29nbGVQcm90b0JCLlZhbHVlX1JlY29yZGVyX1RyYWluX0lu",
            "X091dBI5Cg1QbGF5ZXJfU3RhdHVzGAIgASgLMiIuR29vZ2xlUHJvdG9CQi5W",
            "YWx1ZV9QbGF5ZXJfU3RhdHVzEjUKC2NhbWVyYV90eXBlGAMgASgLMiAuR29v",
            "Z2xlUHJvdG9CQi5WYWx1ZV9DYW1lcmFfVHlwZRJLChZSZWNvcmRlcl9DbG9z",
            "ZWRDYXB0aW9uGAQgASgLMisuR29vZ2xlUHJvdG9CQi5WYWx1ZV9SZWNvcmRl",
            "cl9DbG9zZWRDYXB0aW9uEkcKFFBsYXllcl9DbG9zZWRDYXB0aW9uGAUgASgL",
            "MikuR29vZ2xlUHJvdG9CQi5WYWx1ZV9QbGF5ZXJfQ2xvc2VkQ2FwdGlvbirS",
            "CgoQQnJvYWRjYXN0SW5mb0tleRIZChVSZWNvcmRlcl9UcmFpbl9Jbl9PdXQQ",
            "ABIXChNDb21tb25UaW1lUmVmZXJlbmNlEAESEQoNUGxheWVyX1N0YXR1cxAC",
            "EhAKDFBsYXllcl9Hcm91cBADEhEKDVBsYXllcl9DYW1lcmEQBBIPCgtQbGF5",
            "ZXJfVHlwZRAFEhAKDFBsYXllcl9TcGVlZBAGEhMKD1BsYXllcl9Db25zaWdu",
            "ZRAHEg8KC1BsYXllcl9Nb2RlEAgSGgoWUGxheWVyX0V4dGVuZF9QbGF5bGlz",
            "dBAJEg8KC0NhbWVyYV9UeXBlEAoSFwoTUGxheWVyX0xpbWl0X0luX091dBAL",
            "EhQKEFBsYXllcl9Mb29wX01vZGUQDBIVChFQbGF5ZXJfTG9vcF9Db3VudBAN",
            "EhYKElBsYXllcl9QbGF5bGlzdF9JRBAOEh4KGlBsYXllcl9QbGF5bGlzdF9F",
            "bGVtZW50X0lEEA8SDAoIRFZFX01vZGUQEBIMCghEVkVfVHlwZRAREg8KC0RW",
            "RV9DaGFubmVsEBISCwoHRFZFX051bRATEgsKB0RWRV9EZW4QFBIUChBEVkVf",
            "Q3V0VGhyZXNob2xkEBUSGwoXRFZFX0N1c3RvbV9UcmFuc3BhcmVuY3kQFhIO",
            "CgpSVERfU3RhdHVzEBcSDAoIUlREX1R5cGUQGBIQCgxSVERfUG9zaXRpb24Q",
            "GRIOCgpHRlhfU3RhdHVzEBoSEAoMR0ZYX1Bvc2l0aW9uEBsSHAoYR0ZYX0Zh",
            "ZGVfSW5fT3V0X0R1cmF0aW9uEBwSEwoPR0ZYX0xvb3BfSW5fT3V0EB0SEgoO",
            "R0ZYX0xvb3BfQ291bnQQHhIWChJHRlhfUHJlbG9hZF9TdGF0dXMQHxIfChtI",
            "ZWFsdGhJbmZvX1N0b3JhZ2VfQ2FwYWNpdHkQIBIWChJIZWFsdGhJbmZvX1Zl",
            "cnNpb24QIRIbChdIZWFsdGhJbmZvX01peGVyX1N0YXR1cxAiEiAKHEhlYWx0",
            "aEluZm9fTmV0d29ya19CYW5kd2lkdGgQIxIeChpIZWFsdGhJbmZvX0dQVV9U",
            "ZW1wZXJhdHVyZRAkEhkKFUhlYWx0aEluZm9fQUpBX1N0YXR1cxAlEhkKFUhl",
            "YWx0aEluZm9fSEREX1N0YXR1cxAmEhoKFkhlYWx0aEluZm9fQVNJT19TdGF0",
            "dXMQJxIgChxIZWFsdGhJbmZvX0V4dGVybmFsX1RpbWVDb2RlECgSFwoTQ3Vz",
            "dG9tSW5mb0Jyb2FkY2FzdBApEg8KC0JNUl9TZXR0aW5nECoSGgoWVnVNZXRl",
            "cl9MaXZlX01peGVyX1BHTRArEhoKFlJlY29yZGVyX0Nsb3NlX0NhcHRpb24Q",
            "LBIYChRQbGF5ZXJfQ2xvc2VfQ2FwdGlvbhAtEhQKEEN1c3RvbUluZm9Ob3Rp",
            "ZnkQLhIYChRQbGF5ZXJfQXVkaW9QcmVzZXRJZBAvEg4KClBpUF9TdGF0dXMQ",
            "MBIcChhIZWFsdGhJbmZvX1NlcnZlcl9NZW1vcnkQMRIjCh9DYWNoZV9SZXBs",
            "YXlQbGF5ZXJfSGlnaFJlc1ZpZGVvEDISJAogQ2FjaGVfUmVwbGF5UGxheWVy",
            "X0V4dGVybmFsQXVkaW8QMxIeChpIZWFsdGhJbmZvX1JlZmVyZW5jZVN0YXR1",
            "cxA0EhsKF0hlYWx0aEluZm9fU2VyaWFsTnVtYmVyEDUSIgoeSGVhbHRoSW5m",
            "b19SZW1haW5pbmdUaW1lUGVyQ2FtEDYSFgoSRmlsbV9FZmZlY3RfU3RhdHVz",
            "EDcSCQoFVGFsbHkQOCqTCQoFQ25sSUQSEAoMSURfUmVwbGF5MV8wEAASEQoN",
            "SURfUmVwbGF5MV8xNRAPEhEKDUlEX1JlcGxheTFfMzEQHxIXChNJRF9SZXBs",
            "YXkxX1BHTURpcnR5ECASFwoTSURfUmVwbGF5MV9QR01DbGVhbhAhEhUKEUlE",
            "X1JlcGxheTFfSW1wb3J0ECISEAoMSURfUmVwbGF5Ml8wEDISEQoNSURfUmVw",
            "bGF5Ml8xNRBBEhEKDUlEX1JlcGxheTJfMzEQURIXChNJRF9SZXBsYXkyX1BH",
            "TURpcnR5EFISFwoTSURfUmVwbGF5Ml9QR01DbGVhbhBTEhUKEUlEX1JlcGxh",
            "eTJfSW1wb3J0EFQSCwoHSURfUEdNMRBkEgsKB0lEX1BSVjEQZRIMCghJRF9Q",
            "R00xdhBmEgsKB0lEX1BHTTIQZxIMCghJRF9QR00ydhBoEgsKB0lEX1BSVjIQ",
            "aRILCgdJRF9QR00zEGoSDAoISURfUEdNM3YQaxILCgdJRF9QUlYzEGwSCwoH",
            "SURfUEdNNBBtEgwKCElEX1BHTTR2EG4SCwoHSURfUFJWNBBvEgsKB0lEX1BH",
            "TTUQcBIMCghJRF9QR001dhBxEgsKB0lEX1BSVjUQchILCgdJRF9QR002EHMS",
            "DAoISURfUEdNNnYQdBILCgdJRF9QUlY2EHUSCwoHSURfUEdNNxB2EgwKCElE",
            "X1BHTTd2EHcSCwoHSURfUFJWNxB4EgsKB0lEX1BHTTgQeRIMCghJRF9QR004",
            "dhB6EgsKB0lEX1BSVjgQexIOCglJRF9MaXZlXzAQlgESDwoKSURfTGl2ZV8x",
            "NRClARIPCgpJRF9MaXZlXzMxELUBEhUKEElEX0xpdmVfUEdNRGlydHkQtgES",
            "FQoQSURfTGl2ZV9QR01DbGVhbhC3ARITCg5JRF9MaXZlX0ltcG9ydBC4ARIR",
            "CgxJRF9MaXZlX1BHTTIQuQESEQoMSURfTGl2ZV9QR00zELoBEhEKDElEX0xp",
            "dmVfUEdNNBC7ARIRCgxJRF9MaXZlX1BHTTUQvAESEQoMSURfTGl2ZV9QR002",
            "EL0BEhEKDElEX0xpdmVfUEdNNxC+ARIRCgxJRF9MaXZlX1BHTTgQvwESEQoM",
            "SURfUmVwbGF5M18wEMABEhIKDUlEX1JlcGxheTNfMTUQzwESEgoNSURfUmVw",
            "bGF5M18zMRDfARIYChNJRF9SZXBsYXkzX1BHTURpcnR5EOABEhgKE0lEX1Jl",
            "cGxheTNfUEdNQ2xlYW4Q4QESFgoRSURfUmVwbGF5M19JbXBvcnQQ4gESFAoP",
            "SURfUEdNMl80ODBfMjcwEOMBEhQKD0lEX1BHTTNfNDgwXzI3MBDkARIUCg9J",
            "RF9QR000XzQ4MF8yNzAQ5QESFAoPSURfUEdNNV80ODBfMjcwEOYBEhQKD0lE",
            "X1BHTTZfNDgwXzI3MBDnARIUCg9JRF9QR003XzQ4MF8yNzAQ6AESFAoPSURf",
            "UEdNOF80ODBfMjcwEOkBEg0KCElEX1RHQV8wEOoBEg0KCElEX1RHQV8xEOsB",
            "Eg8KCklEX0NubF9NYXgQ7AFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GoogleProtoBB.BroadcastInfoKey), typeof(global::GoogleProtoBB.CnlID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Recorder_Train_In_Out), global::GoogleProtoBB.Value_Recorder_Train_In_Out.Parser, new[]{ "Count", "TrainIn", "TrainOut" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Player_Status), global::GoogleProtoBB.Value_Player_Status.Parser, new[]{ "Count", "StatusInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo), global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo.Parser, new[]{ "Id", "Status" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Camera_Type), global::GoogleProtoBB.Value_Camera_Type.Parser, new[]{ "Count", "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo), global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo.Parser, new[]{ "CamID", "IsNetworking" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Recorder_ClosedCaption), global::GoogleProtoBB.Value_Recorder_ClosedCaption.Parser, new[]{ "Count", "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo), global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo.Parser, new[]{ "CamID", "HasClosedCaption" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Player_ClosedCaption), global::GoogleProtoBB.Value_Player_ClosedCaption.Parser, new[]{ "Count", "Items" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo), global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo.Parser, new[]{ "Playerid", "HasClosedCaption" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GoogleProtoBB.BroadCastData), global::GoogleProtoBB.BroadCastData.Parser, new[]{ "RecorderTrainInOut", "PlayerStatus", "CameraType", "RecorderClosedCaption", "PlayerClosedCaption" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BroadcastInfoKey {
    [pbr::OriginalName("Recorder_Train_In_Out")] RecorderTrainInOut = 0,
    [pbr::OriginalName("CommonTimeReference")] CommonTimeReference = 1,
    [pbr::OriginalName("Player_Status")] PlayerStatus = 2,
    [pbr::OriginalName("Player_Group")] PlayerGroup = 3,
    [pbr::OriginalName("Player_Camera")] PlayerCamera = 4,
    [pbr::OriginalName("Player_Type")] PlayerType = 5,
    [pbr::OriginalName("Player_Speed")] PlayerSpeed = 6,
    [pbr::OriginalName("Player_Consigne")] PlayerConsigne = 7,
    [pbr::OriginalName("Player_Mode")] PlayerMode = 8,
    [pbr::OriginalName("Player_Extend_Playlist")] PlayerExtendPlaylist = 9,
    [pbr::OriginalName("Camera_Type")] CameraType = 10,
    [pbr::OriginalName("Player_Limit_In_Out")] PlayerLimitInOut = 11,
    [pbr::OriginalName("Player_Loop_Mode")] PlayerLoopMode = 12,
    [pbr::OriginalName("Player_Loop_Count")] PlayerLoopCount = 13,
    [pbr::OriginalName("Player_Playlist_ID")] PlayerPlaylistId = 14,
    [pbr::OriginalName("Player_Playlist_Element_ID")] PlayerPlaylistElementId = 15,
    [pbr::OriginalName("DVE_Mode")] DveMode = 16,
    [pbr::OriginalName("DVE_Type")] DveType = 17,
    [pbr::OriginalName("DVE_Channel")] DveChannel = 18,
    [pbr::OriginalName("DVE_Num")] DveNum = 19,
    [pbr::OriginalName("DVE_Den")] DveDen = 20,
    [pbr::OriginalName("DVE_CutThreshold")] DveCutThreshold = 21,
    [pbr::OriginalName("DVE_Custom_Transparency")] DveCustomTransparency = 22,
    [pbr::OriginalName("RTD_Status")] RtdStatus = 23,
    [pbr::OriginalName("RTD_Type")] RtdType = 24,
    [pbr::OriginalName("RTD_Position")] RtdPosition = 25,
    [pbr::OriginalName("GFX_Status")] GfxStatus = 26,
    [pbr::OriginalName("GFX_Position")] GfxPosition = 27,
    [pbr::OriginalName("GFX_Fade_In_Out_Duration")] GfxFadeInOutDuration = 28,
    [pbr::OriginalName("GFX_Loop_In_Out")] GfxLoopInOut = 29,
    [pbr::OriginalName("GFX_Loop_Count")] GfxLoopCount = 30,
    [pbr::OriginalName("GFX_Preload_Status")] GfxPreloadStatus = 31,
    [pbr::OriginalName("HealthInfo_Storage_Capacity")] HealthInfoStorageCapacity = 32,
    [pbr::OriginalName("HealthInfo_Version")] HealthInfoVersion = 33,
    [pbr::OriginalName("HealthInfo_Mixer_Status")] HealthInfoMixerStatus = 34,
    [pbr::OriginalName("HealthInfo_Network_Bandwidth")] HealthInfoNetworkBandwidth = 35,
    [pbr::OriginalName("HealthInfo_GPU_Temperature")] HealthInfoGpuTemperature = 36,
    [pbr::OriginalName("HealthInfo_AJA_Status")] HealthInfoAjaStatus = 37,
    [pbr::OriginalName("HealthInfo_HDD_Status")] HealthInfoHddStatus = 38,
    [pbr::OriginalName("HealthInfo_ASIO_Status")] HealthInfoAsioStatus = 39,
    [pbr::OriginalName("HealthInfo_External_TimeCode")] HealthInfoExternalTimeCode = 40,
    [pbr::OriginalName("CustomInfoBroadcast")] CustomInfoBroadcast = 41,
    [pbr::OriginalName("BMR_Setting")] BmrSetting = 42,
    [pbr::OriginalName("VuMeter_Live_Mixer_PGM")] VuMeterLiveMixerPgm = 43,
    [pbr::OriginalName("Recorder_Close_Caption")] RecorderCloseCaption = 44,
    [pbr::OriginalName("Player_Close_Caption")] PlayerCloseCaption = 45,
    [pbr::OriginalName("CustomInfoNotify")] CustomInfoNotify = 46,
    [pbr::OriginalName("Player_AudioPresetId")] PlayerAudioPresetId = 47,
    [pbr::OriginalName("PiP_Status")] PiPStatus = 48,
    [pbr::OriginalName("HealthInfo_Server_Memory")] HealthInfoServerMemory = 49,
    [pbr::OriginalName("Cache_ReplayPlayer_HighResVideo")] CacheReplayPlayerHighResVideo = 50,
    [pbr::OriginalName("Cache_ReplayPlayer_ExternalAudio")] CacheReplayPlayerExternalAudio = 51,
    [pbr::OriginalName("HealthInfo_ReferenceStatus")] HealthInfoReferenceStatus = 52,
    [pbr::OriginalName("HealthInfo_SerialNumber")] HealthInfoSerialNumber = 53,
    [pbr::OriginalName("HealthInfo_RemainingTimePerCam")] HealthInfoRemainingTimePerCam = 54,
    [pbr::OriginalName("Film_Effect_Status")] FilmEffectStatus = 55,
    [pbr::OriginalName("Tally")] Tally = 56,
  }

  public enum CnlID {
    [pbr::OriginalName("ID_Replay1_0")] IdReplay10 = 0,
    [pbr::OriginalName("ID_Replay1_15")] IdReplay115 = 15,
    [pbr::OriginalName("ID_Replay1_31")] IdReplay131 = 31,
    [pbr::OriginalName("ID_Replay1_PGMDirty")] IdReplay1Pgmdirty = 32,
    [pbr::OriginalName("ID_Replay1_PGMClean")] IdReplay1Pgmclean = 33,
    [pbr::OriginalName("ID_Replay1_Import")] IdReplay1Import = 34,
    [pbr::OriginalName("ID_Replay2_0")] IdReplay20 = 50,
    [pbr::OriginalName("ID_Replay2_15")] IdReplay215 = 65,
    [pbr::OriginalName("ID_Replay2_31")] IdReplay231 = 81,
    [pbr::OriginalName("ID_Replay2_PGMDirty")] IdReplay2Pgmdirty = 82,
    [pbr::OriginalName("ID_Replay2_PGMClean")] IdReplay2Pgmclean = 83,
    [pbr::OriginalName("ID_Replay2_Import")] IdReplay2Import = 84,
    [pbr::OriginalName("ID_PGM1")] IdPgm1 = 100,
    [pbr::OriginalName("ID_PRV1")] IdPrv1 = 101,
    [pbr::OriginalName("ID_PGM1v")] IdPgm1V = 102,
    [pbr::OriginalName("ID_PGM2")] IdPgm2 = 103,
    [pbr::OriginalName("ID_PGM2v")] IdPgm2V = 104,
    [pbr::OriginalName("ID_PRV2")] IdPrv2 = 105,
    [pbr::OriginalName("ID_PGM3")] IdPgm3 = 106,
    [pbr::OriginalName("ID_PGM3v")] IdPgm3V = 107,
    [pbr::OriginalName("ID_PRV3")] IdPrv3 = 108,
    [pbr::OriginalName("ID_PGM4")] IdPgm4 = 109,
    [pbr::OriginalName("ID_PGM4v")] IdPgm4V = 110,
    [pbr::OriginalName("ID_PRV4")] IdPrv4 = 111,
    [pbr::OriginalName("ID_PGM5")] IdPgm5 = 112,
    [pbr::OriginalName("ID_PGM5v")] IdPgm5V = 113,
    [pbr::OriginalName("ID_PRV5")] IdPrv5 = 114,
    [pbr::OriginalName("ID_PGM6")] IdPgm6 = 115,
    [pbr::OriginalName("ID_PGM6v")] IdPgm6V = 116,
    [pbr::OriginalName("ID_PRV6")] IdPrv6 = 117,
    [pbr::OriginalName("ID_PGM7")] IdPgm7 = 118,
    [pbr::OriginalName("ID_PGM7v")] IdPgm7V = 119,
    [pbr::OriginalName("ID_PRV7")] IdPrv7 = 120,
    [pbr::OriginalName("ID_PGM8")] IdPgm8 = 121,
    [pbr::OriginalName("ID_PGM8v")] IdPgm8V = 122,
    [pbr::OriginalName("ID_PRV8")] IdPrv8 = 123,
    [pbr::OriginalName("ID_Live_0")] IdLive0 = 150,
    [pbr::OriginalName("ID_Live_15")] IdLive15 = 165,
    [pbr::OriginalName("ID_Live_31")] IdLive31 = 181,
    [pbr::OriginalName("ID_Live_PGMDirty")] IdLivePgmdirty = 182,
    [pbr::OriginalName("ID_Live_PGMClean")] IdLivePgmclean = 183,
    [pbr::OriginalName("ID_Live_Import")] IdLiveImport = 184,
    [pbr::OriginalName("ID_Live_PGM2")] IdLivePgm2 = 185,
    [pbr::OriginalName("ID_Live_PGM3")] IdLivePgm3 = 186,
    [pbr::OriginalName("ID_Live_PGM4")] IdLivePgm4 = 187,
    [pbr::OriginalName("ID_Live_PGM5")] IdLivePgm5 = 188,
    [pbr::OriginalName("ID_Live_PGM6")] IdLivePgm6 = 189,
    [pbr::OriginalName("ID_Live_PGM7")] IdLivePgm7 = 190,
    [pbr::OriginalName("ID_Live_PGM8")] IdLivePgm8 = 191,
    [pbr::OriginalName("ID_Replay3_0")] IdReplay30 = 192,
    [pbr::OriginalName("ID_Replay3_15")] IdReplay315 = 207,
    [pbr::OriginalName("ID_Replay3_31")] IdReplay331 = 223,
    [pbr::OriginalName("ID_Replay3_PGMDirty")] IdReplay3Pgmdirty = 224,
    [pbr::OriginalName("ID_Replay3_PGMClean")] IdReplay3Pgmclean = 225,
    [pbr::OriginalName("ID_Replay3_Import")] IdReplay3Import = 226,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM2_480_270")] IdPgm2480270 = 227,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM3_480_270")] IdPgm3480270 = 228,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM4_480_270")] IdPgm4480270 = 229,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM5_480_270")] IdPgm5480270 = 230,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM6_480_270")] IdPgm6480270 = 231,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM7_480_270")] IdPgm7480270 = 232,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_PGM8_480_270")] IdPgm8480270 = 233,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_TGA_0")] IdTga0 = 234,
    /// <summary>
    ///only used for Dll.FrameReceiver for cnl register
    /// </summary>
    [pbr::OriginalName("ID_TGA_1")] IdTga1 = 235,
    [pbr::OriginalName("ID_Cnl_Max")] IdCnlMax = 236,
  }

  #endregion

  #region Messages
  public sealed partial class Value_Recorder_Train_In_Out : pb::IMessage<Value_Recorder_Train_In_Out> {
    private static readonly pb::MessageParser<Value_Recorder_Train_In_Out> _parser = new pb::MessageParser<Value_Recorder_Train_In_Out>(() => new Value_Recorder_Train_In_Out());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value_Recorder_Train_In_Out> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoogleProtoBB.BroadcastReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Recorder_Train_In_Out() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Recorder_Train_In_Out(Value_Recorder_Train_In_Out other) : this() {
      count_ = other.count_;
      trainIn_ = other.trainIn_.Clone();
      trainOut_ = other.trainOut_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Recorder_Train_In_Out Clone() {
      return new Value_Recorder_Train_In_Out(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "trainIn" field.</summary>
    public const int TrainInFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_trainIn_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> trainIn_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> TrainIn {
      get { return trainIn_; }
    }

    /// <summary>Field number for the "trainOut" field.</summary>
    public const int TrainOutFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_trainOut_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> trainOut_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> TrainOut {
      get { return trainOut_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value_Recorder_Train_In_Out);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value_Recorder_Train_In_Out other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!trainIn_.Equals(other.trainIn_)) return false;
      if(!trainOut_.Equals(other.trainOut_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= trainIn_.GetHashCode();
      hash ^= trainOut_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      trainIn_.WriteTo(output, _repeated_trainIn_codec);
      trainOut_.WriteTo(output, _repeated_trainOut_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += trainIn_.CalculateSize(_repeated_trainIn_codec);
      size += trainOut_.CalculateSize(_repeated_trainOut_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value_Recorder_Train_In_Out other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      trainIn_.Add(other.trainIn_);
      trainOut_.Add(other.trainOut_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            trainIn_.AddEntriesFrom(input, _repeated_trainIn_codec);
            break;
          }
          case 26:
          case 24: {
            trainOut_.AddEntriesFrom(input, _repeated_trainOut_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Value_Player_Status : pb::IMessage<Value_Player_Status> {
    private static readonly pb::MessageParser<Value_Player_Status> _parser = new pb::MessageParser<Value_Player_Status>(() => new Value_Player_Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value_Player_Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoogleProtoBB.BroadcastReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Player_Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Player_Status(Value_Player_Status other) : this() {
      count_ = other.count_;
      statusInfo_ = other.statusInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Player_Status Clone() {
      return new Value_Player_Status(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "statusInfo" field.</summary>
    public const int StatusInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo> _repeated_statusInfo_codec
        = pb::FieldCodec.ForMessage(18, global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo.Parser);
    private readonly pbc::RepeatedField<global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo> statusInfo_ = new pbc::RepeatedField<global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GoogleProtoBB.Value_Player_Status.Types.StatusInfo> StatusInfo {
      get { return statusInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value_Player_Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value_Player_Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!statusInfo_.Equals(other.statusInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= statusInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      statusInfo_.WriteTo(output, _repeated_statusInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += statusInfo_.CalculateSize(_repeated_statusInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value_Player_Status other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      statusInfo_.Add(other.statusInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18: {
            statusInfo_.AddEntriesFrom(input, _repeated_statusInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Value_Player_Status message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StatusInfo : pb::IMessage<StatusInfo> {
        private static readonly pb::MessageParser<StatusInfo> _parser = new pb::MessageParser<StatusInfo>(() => new StatusInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StatusInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GoogleProtoBB.Value_Player_Status.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusInfo(StatusInfo other) : this() {
          id_ = other.id_;
          status_ = other.status_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StatusInfo Clone() {
          return new StatusInfo(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private global::GoogleProtoBB.CnlID id_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GoogleProtoBB.CnlID Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 2;
        private uint status_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StatusInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StatusInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Status != other.Status) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Status != 0) hash ^= Status.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Id);
          }
          if (Status != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Status);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StatusInfo other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Status != 0) {
            Status = other.Status;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                id_ = (global::GoogleProtoBB.CnlID) input.ReadEnum();
                break;
              }
              case 16: {
                Status = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Value_Camera_Type : pb::IMessage<Value_Camera_Type> {
    private static readonly pb::MessageParser<Value_Camera_Type> _parser = new pb::MessageParser<Value_Camera_Type>(() => new Value_Camera_Type());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value_Camera_Type> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoogleProtoBB.BroadcastReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Camera_Type() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Camera_Type(Value_Camera_Type other) : this() {
      count_ = other.count_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Camera_Type Clone() {
      return new Value_Camera_Type(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo> items_ = new pbc::RepeatedField<global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GoogleProtoBB.Value_Camera_Type.Types.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value_Camera_Type);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value_Camera_Type other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value_Camera_Type other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Value_Camera_Type message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
        private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GoogleProtoBB.Value_Camera_Type.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo(ItemInfo other) : this() {
          camID_ = other.camID_;
          isNetworking_ = other.isNetworking_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo Clone() {
          return new ItemInfo(this);
        }

        /// <summary>Field number for the "camID" field.</summary>
        public const int CamIDFieldNumber = 1;
        private uint camID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CamID {
          get { return camID_; }
          set {
            camID_ = value;
          }
        }

        /// <summary>Field number for the "isNetworking" field.</summary>
        public const int IsNetworkingFieldNumber = 2;
        private bool isNetworking_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsNetworking {
          get { return isNetworking_; }
          set {
            isNetworking_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CamID != other.CamID) return false;
          if (IsNetworking != other.IsNetworking) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CamID != 0) hash ^= CamID.GetHashCode();
          if (IsNetworking != false) hash ^= IsNetworking.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CamID != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CamID);
          }
          if (IsNetworking != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsNetworking);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CamID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CamID);
          }
          if (IsNetworking != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemInfo other) {
          if (other == null) {
            return;
          }
          if (other.CamID != 0) {
            CamID = other.CamID;
          }
          if (other.IsNetworking != false) {
            IsNetworking = other.IsNetworking;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CamID = input.ReadUInt32();
                break;
              }
              case 16: {
                IsNetworking = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Value_Recorder_ClosedCaption : pb::IMessage<Value_Recorder_ClosedCaption> {
    private static readonly pb::MessageParser<Value_Recorder_ClosedCaption> _parser = new pb::MessageParser<Value_Recorder_ClosedCaption>(() => new Value_Recorder_ClosedCaption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value_Recorder_ClosedCaption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoogleProtoBB.BroadcastReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Recorder_ClosedCaption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Recorder_ClosedCaption(Value_Recorder_ClosedCaption other) : this() {
      count_ = other.count_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Recorder_ClosedCaption Clone() {
      return new Value_Recorder_ClosedCaption(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo> items_ = new pbc::RepeatedField<global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GoogleProtoBB.Value_Recorder_ClosedCaption.Types.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value_Recorder_ClosedCaption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value_Recorder_ClosedCaption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value_Recorder_ClosedCaption other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Value_Recorder_ClosedCaption message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
        private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GoogleProtoBB.Value_Recorder_ClosedCaption.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo(ItemInfo other) : this() {
          camID_ = other.camID_;
          hasClosedCaption_ = other.hasClosedCaption_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo Clone() {
          return new ItemInfo(this);
        }

        /// <summary>Field number for the "camID" field.</summary>
        public const int CamIDFieldNumber = 1;
        private uint camID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CamID {
          get { return camID_; }
          set {
            camID_ = value;
          }
        }

        /// <summary>Field number for the "hasClosedCaption" field.</summary>
        public const int HasClosedCaptionFieldNumber = 2;
        private bool hasClosedCaption_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasClosedCaption {
          get { return hasClosedCaption_; }
          set {
            hasClosedCaption_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CamID != other.CamID) return false;
          if (HasClosedCaption != other.HasClosedCaption) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CamID != 0) hash ^= CamID.GetHashCode();
          if (HasClosedCaption != false) hash ^= HasClosedCaption.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CamID != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CamID);
          }
          if (HasClosedCaption != false) {
            output.WriteRawTag(16);
            output.WriteBool(HasClosedCaption);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CamID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CamID);
          }
          if (HasClosedCaption != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemInfo other) {
          if (other == null) {
            return;
          }
          if (other.CamID != 0) {
            CamID = other.CamID;
          }
          if (other.HasClosedCaption != false) {
            HasClosedCaption = other.HasClosedCaption;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CamID = input.ReadUInt32();
                break;
              }
              case 16: {
                HasClosedCaption = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Value_Player_ClosedCaption : pb::IMessage<Value_Player_ClosedCaption> {
    private static readonly pb::MessageParser<Value_Player_ClosedCaption> _parser = new pb::MessageParser<Value_Player_ClosedCaption>(() => new Value_Player_ClosedCaption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value_Player_ClosedCaption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoogleProtoBB.BroadcastReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Player_ClosedCaption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Player_ClosedCaption(Value_Player_ClosedCaption other) : this() {
      count_ = other.count_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value_Player_ClosedCaption Clone() {
      return new Value_Player_ClosedCaption(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo> items_ = new pbc::RepeatedField<global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GoogleProtoBB.Value_Player_ClosedCaption.Types.ItemInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value_Player_ClosedCaption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value_Player_ClosedCaption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value_Player_ClosedCaption other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Value_Player_ClosedCaption message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
        private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GoogleProtoBB.Value_Player_ClosedCaption.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo(ItemInfo other) : this() {
          playerid_ = other.playerid_;
          hasClosedCaption_ = other.hasClosedCaption_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemInfo Clone() {
          return new ItemInfo(this);
        }

        /// <summary>Field number for the "playerid" field.</summary>
        public const int PlayeridFieldNumber = 1;
        private uint playerid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Playerid {
          get { return playerid_; }
          set {
            playerid_ = value;
          }
        }

        /// <summary>Field number for the "hasClosedCaption" field.</summary>
        public const int HasClosedCaptionFieldNumber = 2;
        private bool hasClosedCaption_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasClosedCaption {
          get { return hasClosedCaption_; }
          set {
            hasClosedCaption_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Playerid != other.Playerid) return false;
          if (HasClosedCaption != other.HasClosedCaption) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Playerid != 0) hash ^= Playerid.GetHashCode();
          if (HasClosedCaption != false) hash ^= HasClosedCaption.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Playerid != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Playerid);
          }
          if (HasClosedCaption != false) {
            output.WriteRawTag(16);
            output.WriteBool(HasClosedCaption);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Playerid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Playerid);
          }
          if (HasClosedCaption != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemInfo other) {
          if (other == null) {
            return;
          }
          if (other.Playerid != 0) {
            Playerid = other.Playerid;
          }
          if (other.HasClosedCaption != false) {
            HasClosedCaption = other.HasClosedCaption;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Playerid = input.ReadUInt32();
                break;
              }
              case 16: {
                HasClosedCaption = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///message Value_Player_Status
  ///{
  ///message StatusInfo
  ///{
  ///CnlID		id;
  ///uint8_t		status;
  ///};
  ///uint32			 count = NB_PLAYER;
  ///StatusInfo		 statusInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Group
  ///{
  ///message GroupInfo
  ///{
  ///CnlID		id;
  ///char		group;
  ///};
  ///uint32			 count = NB_PLAYER;
  ///GroupInfo		 groupInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Camera
  ///{
  ///message CameraInfo
  ///{
  ///CnlID		id;
  ///CamID		camera;
  ///};
  ///uint32			 count = NB_PLAYER;
  ///CameraInfo		 cameraInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Type
  ///{
  ///message TypeInfo
  ///{
  ///CnlID				id;
  ///PlayerType	type;
  ///};
  ///uint32				count = NB_PLAYER;
  ///TypeInfo			typeInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_AudioPresetId
  ///{
  ///message TypeInfo
  ///{
  ///CnlID				id;
  ///uint8_t				audioPresetId;//-1 means not preset assigned
  ///};
  ///uint32				count = NB_PLAYER;
  ///TypeInfo			typeInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Speed
  ///{
  ///message SpeedInfo
  ///{
  ///CnlID				id;
  ///int32_t				speedN;
  ///int32_t				speedD;
  ///};
  ///uint32				count = NB_PLAYER;
  ///SpeedInfo			speedInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Consigne
  ///{
  ///message ConsigneInfo
  ///{
  ///CnlID				id;
  ///uint64_t			consigne;
  ///};
  ///uint32				count = NB_PLAYER;
  ///ConsigneInfo		consigneInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Mode
  ///{
  ///message ModeInfo
  ///{
  ///CnlID				id;
  ///PlayerMode		playerMode;
  ///};
  ///uint32				count = NB_PLAYER;
  ///ModeInfo			modeInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Extend_Playlist
  ///{
  ///message ExtendPlaylistInfo
  ///{
  ///CnlID				id;
  ///bool				bExtendPlaylist;
  ///};
  ///uint32				count = NB_PLAYER;
  ///ExtendPlaylistInfo  extendPlaylistInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Limit_In_Out
  ///{
  ///message LimitInfo
  ///{
  ///CnlID				id;
  ///bool				isLimitInRelative;
  ///bool				isLimitOutRelative;
  ///uint64_t			limitIn;
  ///uint64_t			limitOut;
  ///};
  ///uint32				count = NB_PLAYER;
  ///LimitInfo			limitInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Loop_Mode
  ///{
  ///message LoopModeInfo
  ///{
  ///CnlID				id;
  ///PlayerLoopMode	loopMode;
  ///};
  ///uint32				count = NB_PLAYER;
  ///LoopModeInfo		loopModeInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Loop_Count
  ///{
  ///message LoopCountInfo
  ///{
  ///CnlID				id;
  ///uint8_t				loopCount;
  ///};
  ///uint32				count = NB_PLAYER;
  ///LoopCountInfo		loopCountInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Playlist_ID
  ///{
  ///message PlaylistIDInfo
  ///{
  ///CnlID	id;
  ///uint8_t	idSize;
  ///char* playlistID;
  ///};
  ///uint32				count = NB_PLAYER;
  ///PlaylistIDInfo		playlistIDInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_Player_Playlist_Element_ID
  ///{
  ///message ElementIDInfo
  ///{
  ///CnlID				id;
  ///uint8_t				idSize;
  ///char* elementID;
  ///};
  ///uint32				count = NB_PLAYER;
  ///ElementIDInfo		elementIDInfo[NB_PLAYER];
  ///};
  ///
  ///message Value_DVE_Mode
  ///{
  ///message DVEModeInfo
  ///{
  ///CnlID id;
  ///DVEMode				mode;
  ///};
  ///uint32				count = NB_MAX_USER;
  ///DVEModeInfo			modeInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_DVE_Type
  ///{
  ///message DVETypeInfo
  ///{
  ///CnlID id;
  ///transportCmd::DVEType	type;
  ///};
  ///uint32					count = NB_MAX_USER;
  ///DVETypeInfo				typeInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_DVE_Channel
  ///{
  ///uint32			 count = NB_MAX_USER;
  ///CnlID			 cnl[NB_MAX_USER];
  ///};
  ///
  ///message Value_DVE_Num
  ///{
  ///message DVENumInfo
  ///{
  ///CnlID		id;
  ///int32_t		num;
  ///};
  ///uint32			 count = NB_MAX_USER;
  ///DVENumInfo		 numInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_DVE_Den
  ///{
  ///message DVEDenInfo
  ///{
  ///CnlID		id;
  ///int32_t		den;
  ///};
  ///uint32			 count = NB_MAX_USER;
  ///DVEDenInfo		 denInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_DVE_CutThreshold
  ///{
  ///message DVEThresholdInfo
  ///{
  ///CnlID		id;
  ///int32_t		threshold;
  ///};
  ///uint32			 count = NB_MAX_USER;
  ///DVEThresholdInfo thresholdInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_DVE_Custom_Transparency
  ///{
  ///message DVECustomTransparencyInfo
  ///{
  ///CnlID		id;
  ///bool		bCustom;
  ///};
  ///uint32					  count = NB_MAX_USER;
  ///DVECustomTransparencyInfo customInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_RTD_Status
  ///{
  ///message RTDStatusInfo
  ///{
  ///CnlID		id;
  ///bool		enable;
  ///};
  ///uint32			 count = NB_MAX_USER;
  ///RTDStatusInfo	 statusInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_RTD_Type
  ///{
  ///message RTDTypeInfo
  ///{
  ///CnlID		id;
  ///transportCmd::RTDType	 type;
  ///};
  ///uint32					 count = NB_MAX_USER;
  ///RTDTypeInfo				 typeInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_RTD_Position
  ///{
  ///message RTDPositionInfo
  ///{
  ///CnlID		id;
  ///uint32_t		 position;
  ///};
  ///uint32			 count = NB_MAX_USER;
  ///RTDPositionInfo	 positionInfo[NB_MAX_USER];
  ///};
  ///
  ///message Value_GFX_Status
  ///{
  ///message GFXStatus
  ///{
  ///CnlID targetCnlID;
  ///GFxCnl gfxCnl;
  ///bool enable;
  ///};
  ///message PGMGFX
  ///{
  ///uint32			 count;
  ///GFXStatus* gfxStatus;
  ///};
  ///uint32			 pgmCount;
  ///PGMGFX* pgmGfx;
  ///};
  ///
  ///message Value_GFX_Position
  ///{
  ///message GFXPosition
  ///{
  ///CnlID	 targetCnlID;
  ///GFxCnl	 gfxCnl;
  ///uint32_t position;
  ///};
  ///message PGMGFX
  ///{
  ///uint32			 count;
  ///GFXPosition* gfxPosition;
  ///};
  ///uint32			 pgmCount;
  ///PGMGFX* pgmGfx;
  ///};
  ///
  ///message Value_GFX_Fade_In_Out_Duration
  ///{
  ///message GFXFadeDuration
  ///{
  ///CnlID		targetCnlID;
  ///GFxCnl		gfxCnl;
  ///uint32_t		fadeInDuration;
  ///uint32_t		fadeOutDuration;
  ///};
  ///message PGMGFX
  ///{
  ///uint32			 count;
  ///GFXFadeDuration* gfxFadeDuration;
  ///};
  ///uint32				pgmCount;
  ///PGMGFX* pgmGfx;
  ///};
  ///
  ///message Value_GFX_Loop_In_Out
  ///{
  ///message GFXLoopInOut
  ///{
  ///CnlID targetCnlID;
  ///GFxCnl gfxCnl;
  ///uint32_t loopIn;
  ///uint32_t loopOut;
  ///};
  ///message PGMGFX
  ///{
  ///uint32			count;
  ///GFXLoopInOut* gfxLoopInOut;
  ///};
  ///uint32				pgmCount;
  ///PGMGFX* pgmGfx;
  ///};
  ///
  ///message Value_GFX_Loop_Count
  ///{
  ///message GFXLoopCnt
  ///{
  ///CnlID targetCnlID;
  ///GFxCnl gfxCnl;
  ///uint32_t loopCnt;
  ///};
  ///message PGMGFX
  ///{
  ///uint32		  count;
  ///GFXLoopCnt* gfxLoopCnt;
  ///};
  ///uint32				pgmCount;
  ///PGMGFX* pgmGfx;
  ///};
  ///
  ///message Value_GFX_Preload_Status
  ///{
  ///message GFXPreloadStatus
  ///{
  ///TGAChannel			gfxCnl;
  ///TGAChannelStatus	preloadingStatus;
  ///uint32_t			preloadNum;
  ///uint32_t			preloadDen;
  ///uint32_t			idSize;
  ///char* id;
  ///};
  ///uint32				count;
  ///GFXPreloadStatus* gfxPreloadStatus;
  ///};
  ///
  ///message Value_HealthInfo_Version
  ///{
  ///uint8_t			 version[4];
  ///};
  ///
  ///message Value_HealthInfo_Mixer_Status
  ///{
  ///bool			 hasConnectedAudioMixer;
  ///};
  ///
  ///message Value_HealthInfo_Network_Bandwidth
  ///{
  ///uint32_t			networkBandwidth;
  ///};
  ///
  ///message Value_HealthInfo_GPU_Temperature
  ///{
  ///uint32				count = 2;
  ///int32_t* temperatureGPU;
  ///};
  ///
  ///message Value_HealthInfo_AJA_Status
  ///{
  ///message InfoAJA
  ///{
  ///int32_t	 temperatureAJA;
  ///bool	 lostAJA;
  ///};
  ///
  ///uint32				count = 2;
  ///InfoAJA* status;
  ///};
  ///
  ///message Value_HealthInfo_HDD_Status
  ///{
  ///uint16_t			hddFaulty;
  ///};
  ///
  ///message Value_HealthInfo_ASIO_Status
  ///{
  ///AsioStatus			status;
  ///};
  ///
  ///message Value_HealthInfo_External_TimeCode
  ///{
  ///bool				isExternalTC;
  ///};
  ///
  ///message Value_CustomInfo
  ///{
  ///message InfoPair
  ///{
  ///DWORD keySize;
  ///DWORD valueSize;
  ///char* key;
  ///char* value;
  ///};
  ///
  ///uint32				nbCustomInfo;
  ///InfoPair* infoArray;
  ///};
  ///
  ///message Value_BMR_Setting
  ///{
  ///uint8_t				type;
  ///uint32_t			bufSize;
  ///char* buf;
  ///};
  ///
  ///message Value_VuMeter_Live_Mixer_PGM
  ///{
  ///message VuMeter
  ///{
  ///uint8_t count;
  ///float* dbTbl;
  ///};
  ///
  ///VuMeter				mixerMeter;
  ///
  ///uint32 countofLiveMeter;
  ///VuMeter* liveMeter;
  ///
  ///uint32 countofPRV;
  ///VuMeter* prvMeter;
  ///
  ///uint32 countofPGM;   //each PGM has clean ,dirty and player vumeters
  ///message PGMUV {
  ///VuMeter uvClean;
  ///VuMeter dirty;
  ///VuMeter player;
  ///};
  ///PGMUV* pgmMeter;  //clean1,dirty1 and player1,clean2 dirty2,player2
  /////and so on
  ///};
  ///
  ///message Value_PiP_Status
  ///{
  ///message PiPStatus
  ///{
  ///CnlID targetCnlID;
  ///transportCmd::PiPType pipCnl;
  ///bool enable;
  ///int	 bgFadeInDuration;
  ///int	 bgFadeOutDuration;
  ///int	 bgLoopIn;
  ///int	 bgLoopOut;
  ///int	 bgLoopCnt;
  ///};
  ///message PGMPiP
  ///{
  ///uint32			 count;
  ///PiPStatus* gfxStatus;
  ///};
  ///uint32			 pgmCount;
  ///PGMPiP* pgmPiP;
  ///};
  ///
  ///message Value_Server_Memory
  ///{
  ///uint32_t			currentMemory_GB;
  ///uint32_t			expectedMemory_GB;
  ///};
  ///
  ///message Value_Cache_ReplayPlayer_HighResVideo
  ///{
  ///message Range
  ///{
  ///uint64_t currentFrameID;
  ///uint64_t out;
  ///};
  ///uint32				count = NB_REPLAY;
  ///Range				range[NB_REPLAY];
  ///};
  ///
  ///message Value_Cache_ReplayPlayer_ExternalAudio
  ///{
  ///message Range
  ///{
  ///uint64_t currentFrameID;
  ///uint64_t out;
  ///};
  ///uint32				count = NB_REPLAY;
  ///Range				range[NB_REPLAY];
  ///};
  ///
  ///message Value_Storage_Capacity
  ///{
  ///uint32_t			blockSize_MB = 32;
  ///uint32_t			nbBlockUsed = 0;
  ///uint32_t			nbBlockTotal = 0;
  ///};
  ///
  ///message Value_HealthInfo_ReferenceStatus
  ///{
  ///ReferenceStatus		referenceStatus;
  ///};
  ///
  ///message Value_HealthInfo_SerialNumber
  ///{
  ///message ServerInfo
  ///{
  ///int32_t				ip;
  ///uint32_t			snSize;
  ///char* sn;
  ///};
  ///
  ///uint32_t			nbServer;
  ///ServerInfo* serverInfo;
  ///};
  ///
  ///message Value_HealthInfo_RemainingTimePerCam
  ///{
  ///message RemainingTime
  ///{
  ///CamID	 cam;
  ///uint32_t remainingSecond;
  ///};
  ///
  ///uint32				count = NB_CAMERA;
  ///RemainingTime		remainingTime[NB_CAMERA];
  ///};
  ///
  ///message Value_Film_Effect_Status
  ///{
  ///bool				PGM_enabled[NB_PLAYOUT] = { false };
  ///bool				PRV_enabled[NB_PLAYOUT] = { false };
  ///};
  ///
  ///message Value_Common_TimeReference
  ///{
  ///uint64_t			timeReference=1;
  ///};
  /// </summary>
  public sealed partial class BroadCastData : pb::IMessage<BroadCastData> {
    private static readonly pb::MessageParser<BroadCastData> _parser = new pb::MessageParser<BroadCastData>(() => new BroadCastData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadCastData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoogleProtoBB.BroadcastReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastData(BroadCastData other) : this() {
      recorderTrainInOut_ = other.recorderTrainInOut_ != null ? other.recorderTrainInOut_.Clone() : null;
      playerStatus_ = other.playerStatus_ != null ? other.playerStatus_.Clone() : null;
      cameraType_ = other.cameraType_ != null ? other.cameraType_.Clone() : null;
      recorderClosedCaption_ = other.recorderClosedCaption_ != null ? other.recorderClosedCaption_.Clone() : null;
      playerClosedCaption_ = other.playerClosedCaption_ != null ? other.playerClosedCaption_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCastData Clone() {
      return new BroadCastData(this);
    }

    /// <summary>Field number for the "Recorder_Train_In_Out" field.</summary>
    public const int RecorderTrainInOutFieldNumber = 1;
    private global::GoogleProtoBB.Value_Recorder_Train_In_Out recorderTrainInOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GoogleProtoBB.Value_Recorder_Train_In_Out RecorderTrainInOut {
      get { return recorderTrainInOut_; }
      set {
        recorderTrainInOut_ = value;
      }
    }

    /// <summary>Field number for the "Player_Status" field.</summary>
    public const int PlayerStatusFieldNumber = 2;
    private global::GoogleProtoBB.Value_Player_Status playerStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GoogleProtoBB.Value_Player_Status PlayerStatus {
      get { return playerStatus_; }
      set {
        playerStatus_ = value;
      }
    }

    /// <summary>Field number for the "camera_type" field.</summary>
    public const int CameraTypeFieldNumber = 3;
    private global::GoogleProtoBB.Value_Camera_Type cameraType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GoogleProtoBB.Value_Camera_Type CameraType {
      get { return cameraType_; }
      set {
        cameraType_ = value;
      }
    }

    /// <summary>Field number for the "Recorder_ClosedCaption" field.</summary>
    public const int RecorderClosedCaptionFieldNumber = 4;
    private global::GoogleProtoBB.Value_Recorder_ClosedCaption recorderClosedCaption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GoogleProtoBB.Value_Recorder_ClosedCaption RecorderClosedCaption {
      get { return recorderClosedCaption_; }
      set {
        recorderClosedCaption_ = value;
      }
    }

    /// <summary>Field number for the "Player_ClosedCaption" field.</summary>
    public const int PlayerClosedCaptionFieldNumber = 5;
    private global::GoogleProtoBB.Value_Player_ClosedCaption playerClosedCaption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GoogleProtoBB.Value_Player_ClosedCaption PlayerClosedCaption {
      get { return playerClosedCaption_; }
      set {
        playerClosedCaption_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadCastData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadCastData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RecorderTrainInOut, other.RecorderTrainInOut)) return false;
      if (!object.Equals(PlayerStatus, other.PlayerStatus)) return false;
      if (!object.Equals(CameraType, other.CameraType)) return false;
      if (!object.Equals(RecorderClosedCaption, other.RecorderClosedCaption)) return false;
      if (!object.Equals(PlayerClosedCaption, other.PlayerClosedCaption)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (recorderTrainInOut_ != null) hash ^= RecorderTrainInOut.GetHashCode();
      if (playerStatus_ != null) hash ^= PlayerStatus.GetHashCode();
      if (cameraType_ != null) hash ^= CameraType.GetHashCode();
      if (recorderClosedCaption_ != null) hash ^= RecorderClosedCaption.GetHashCode();
      if (playerClosedCaption_ != null) hash ^= PlayerClosedCaption.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (recorderTrainInOut_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecorderTrainInOut);
      }
      if (playerStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerStatus);
      }
      if (cameraType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CameraType);
      }
      if (recorderClosedCaption_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecorderClosedCaption);
      }
      if (playerClosedCaption_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerClosedCaption);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recorderTrainInOut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecorderTrainInOut);
      }
      if (playerStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStatus);
      }
      if (cameraType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraType);
      }
      if (recorderClosedCaption_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecorderClosedCaption);
      }
      if (playerClosedCaption_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerClosedCaption);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadCastData other) {
      if (other == null) {
        return;
      }
      if (other.recorderTrainInOut_ != null) {
        if (recorderTrainInOut_ == null) {
          recorderTrainInOut_ = new global::GoogleProtoBB.Value_Recorder_Train_In_Out();
        }
        RecorderTrainInOut.MergeFrom(other.RecorderTrainInOut);
      }
      if (other.playerStatus_ != null) {
        if (playerStatus_ == null) {
          playerStatus_ = new global::GoogleProtoBB.Value_Player_Status();
        }
        PlayerStatus.MergeFrom(other.PlayerStatus);
      }
      if (other.cameraType_ != null) {
        if (cameraType_ == null) {
          cameraType_ = new global::GoogleProtoBB.Value_Camera_Type();
        }
        CameraType.MergeFrom(other.CameraType);
      }
      if (other.recorderClosedCaption_ != null) {
        if (recorderClosedCaption_ == null) {
          recorderClosedCaption_ = new global::GoogleProtoBB.Value_Recorder_ClosedCaption();
        }
        RecorderClosedCaption.MergeFrom(other.RecorderClosedCaption);
      }
      if (other.playerClosedCaption_ != null) {
        if (playerClosedCaption_ == null) {
          playerClosedCaption_ = new global::GoogleProtoBB.Value_Player_ClosedCaption();
        }
        PlayerClosedCaption.MergeFrom(other.PlayerClosedCaption);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (recorderTrainInOut_ == null) {
              recorderTrainInOut_ = new global::GoogleProtoBB.Value_Recorder_Train_In_Out();
            }
            input.ReadMessage(recorderTrainInOut_);
            break;
          }
          case 18: {
            if (playerStatus_ == null) {
              playerStatus_ = new global::GoogleProtoBB.Value_Player_Status();
            }
            input.ReadMessage(playerStatus_);
            break;
          }
          case 26: {
            if (cameraType_ == null) {
              cameraType_ = new global::GoogleProtoBB.Value_Camera_Type();
            }
            input.ReadMessage(cameraType_);
            break;
          }
          case 34: {
            if (recorderClosedCaption_ == null) {
              recorderClosedCaption_ = new global::GoogleProtoBB.Value_Recorder_ClosedCaption();
            }
            input.ReadMessage(recorderClosedCaption_);
            break;
          }
          case 42: {
            if (playerClosedCaption_ == null) {
              playerClosedCaption_ = new global::GoogleProtoBB.Value_Player_ClosedCaption();
            }
            input.ReadMessage(playerClosedCaption_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
